{"version":3,"sources":["serviceWorker.ts","redux/action-types.ts","redux/reducers.ts","redux/store.ts","redux/redux-action.class.ts","services/firebase.service.ts","services/auth.service.ts","components/Login.tsx","services/database.service.ts","components/NoteList.tsx","components/NoteEditor.tsx","components/Layout.tsx","components/AuthProtector.tsx","components/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ActionTypes","combinedReducers","combineReducers","user","userState","action","type","SET_USER","data","notes","SET_NOTE_LIST","Object","toConsumableArray","strSearch","str","SET_SEARCH_QUERY","filteredNotes","returnVal","SET_FILTERED_NOTE_LIST","sort","a","b","Title","toLowerCase","localeCompare","selectedNote","note","SET_SELECTED_NOTE","store","createStore","ReduxAction","classCallCheck","this","createClass","key","get","firebaseSvc","firebase","initializeApp","apiKey","process","REACT_APP_APIKEY","authDomain","REACT_APP_AUTHDOMAIN","projectId","REACT_APP_PROJECTID","authSvc","AuthService","auth","googleAuthProvider","GoogleAuthProvider","signInWithRedirect","signOut","Login","props","possibleConstructorReturn","getPrototypeOf","call","loginType","loginWithGoogle","_this","react_default","createElement","index_es","open","fullScreen","component","button","onClick","e","loginWith","className","title","Component","connected","connect","state","dispatch","databaseSvc","firestore","collectionPath","qry","coll","collection","snapshot","items","forEach","doc","docData","ID","id","push","item","add","docRef","update","delete","NoteList","p","sbjSearch","Subject","onSearchChange","setState","objectSpread","loading","target","value","next","onClickNote","onSelectNote","onClickAddNote","asyncToGenerator","regenerator_default","mark","_callee","dummyTitle","newNote","newNoteList","wrap","_context","prev","Date","getTime","toString","Body","UID","uid","addToCollection","concat","setTimeout","titleInput","document","querySelector","focus","select","stop","_this2","pipe","debounceTime","subscribe","selectedNoteID","searchToLower","filter","n","includes","toLocaleLowerCase","index","_this3","selected","dense","divider","classes","root","_this4","getFilterNotes","onChange","placeholder","fontSize","style","color","map","renderListItem","NoteEditor","sbjChange","onCloseNote","onDeleteNote","_ref","noteToDelete","removeItem","_x","apply","arguments","_callee2","_context2","updateItem","body","delta","source","square","onTitleChange","disabled","label","lib_default","onBodyChange","readOnly","theme","Layout","toggleDrawer","isOpen","length","undefined","drawerOpen","logout","logOut","width","isMobile","anchor","variant","onClose","paper","components_NoteList","position","only","email","placement","components_NoteEditor","withWidthConnected","withWidth","AuthProtector","checkAuth","onAuthStateChanged","loadNotes","getCollection","where","CircularProgress_default","size","components_Login","components_Layout","createMuiTheme","palette","primary","main","secondary","App","styles","components_AuthProtector","ReactDOM","render","es","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.396de2ba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum ActionTypes {\r\n  SET_USER = 'SET_USER',\r\n  SET_ACTIVE_NOTE = 'SET_ACTIVE_NOTE',\r\n  SET_NOTE_LIST = 'SET_NOTE_LIST',\r\n  SET_FILTERED_NOTE_LIST = 'SET_FILTERED_NOTE_LIST',\r\n  SET_SEARCH_QUERY = 'SET_SEARCH_QUERY',\r\n  SET_SELECTED_NOTE = 'SET_SELECTED_NOTE',\r\n  SET_SEARCHINPUT_FOCUS_STATE = 'SET_SEARCHINPUT_FOCUS_STATE'\r\n}","import { ReduxAction, IReduxAction } from \"./redux-action.class\";\r\nimport { ActionTypes } from \"./action-types\";\r\nimport { combineReducers } from \"redux\";\r\nimport { INote } from \"../models/note.interface\";\r\nimport { StoreState } from \"./store-state\";\r\n\r\nfunction user(userState:firebase.User, action:IReduxAction<firebase.User>) {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_USER:\r\n      return action.data as firebase.User;\r\n      break;\r\n  \r\n    default:\r\n      return userState || null;\r\n      break;\r\n  }\r\n}\r\n\r\nfunction notes(notes:INote[], action:IReduxAction<INote[]>){\r\n  switch (action.type) {\r\n    case ActionTypes.SET_NOTE_LIST:\r\n      return [...action.data];\r\n      break;\r\n  \r\n    default:\r\n      return notes||[];\r\n      break;\r\n  }\r\n}\r\n\r\nfunction filteredNotes(notes:INote[], action:IReduxAction<INote[]>){\r\n  let returnVal:INote[] = [];\r\n  switch (action.type) {\r\n    case ActionTypes.SET_FILTERED_NOTE_LIST:\r\n      if(action.data){\r\n        returnVal = [...action.data];\r\n      }\r\n      break;\r\n  \r\n    default:\r\n      if(notes){\r\n        returnVal = [...notes];\r\n      }\r\n      break;\r\n  }\r\n\r\n  return returnVal.sort((a,b)=>a.Title.toLowerCase().localeCompare(b.Title.toLowerCase()));\r\n}\r\n\r\nfunction strSearch(str:string, action:IReduxAction<string>){\r\n  switch (action.type) {\r\n    case ActionTypes.SET_SEARCH_QUERY:\r\n      return action.data;\r\n      break;\r\n  \r\n    default:\r\n      return str||\"\";\r\n      break;\r\n  }\r\n}\r\n\r\nfunction selectedNote(note:INote, action:IReduxAction<INote>){\r\n  switch (action.type) {\r\n    case ActionTypes.SET_SELECTED_NOTE:\r\n      return action.data;\r\n      break;\r\n  \r\n    default:\r\n      return note||null;\r\n      break;\r\n  }\r\n}\r\n\r\nexport const combinedReducers = combineReducers({\r\n  user,\r\n  notes:notes,\r\n  strSearch:strSearch,\r\n  filteredNotes:filteredNotes,\r\n  selectedNote:selectedNote\r\n});","import { createStore } from 'redux';\r\nimport { combinedReducers } from './reducers';\r\n\r\nexport const store = createStore(combinedReducers, {});","export interface IReduxAction<T> {\r\n    type: string;\r\n    data: T;\r\n}\r\n\r\nexport class ReduxAction<T> implements IReduxAction<T>{\r\n    constructor(type:string, data:T){\r\n        this.type = type;\r\n        this.data = data;\r\n    }\r\n\r\n    get value ():IReduxAction<T> {\r\n       return {\r\n           type: this.type,\r\n           data: this.data\r\n       }\r\n    }\r\n\r\n    type:string = null;\r\n    data:T = null;\r\n}","import firebase from 'firebase';\r\nconst firebaseSvc = firebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_APIKEY,\r\n        authDomain: process.env.REACT_APP_AUTHDOMAIN,\r\n        projectId: process.env.REACT_APP_PROJECTID\r\n});\r\n\r\nexport default firebaseSvc;","import firebaseSvc from \"./firebase.service\";\r\nimport firebase from \"firebase\";\r\n\r\nclass AuthService{\r\n    constructor(){\r\n        this.auth = firebaseSvc.auth();\r\n        this.googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n    }\r\n\r\n    private auth:firebase.auth.Auth;\r\n\r\n    loginWithGoogle(){\r\n        return this.auth.signInWithRedirect(this.googleAuthProvider);\r\n    }\r\n\r\n    logOut(){\r\n        return this.auth.signOut();\r\n    }\r\n\r\n    googleAuthProvider:firebase.auth.GoogleAuthProvider = null;\r\n}\r\n\r\nconst authSvc = new AuthService();\r\nexport default authSvc;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '../redux/store-state';\r\nimport { Dispatch } from 'redux';\r\nimport { Card, CardHeader, CardContent, Typography, Button, Dialog, DialogTitle, DialogContent, DialogContentText, List, ListItem, ListItemText, ListItemIcon, Icon, Tooltip } from '@material-ui/core';\r\nimport { IReduxAction } from '../redux/redux-action.class';\r\nimport withMobileDialog from '@material-ui/core/withMobileDialog';\r\nimport authSvc from '../services/auth.service';\r\n\r\ninterface LoginProps extends StoreState{\r\n    dispatch?:<T>(action:IReduxAction<T>)=>void,\r\n    fullScreen?:boolean\r\n}\r\n\r\nclass Login extends Component<LoginProps> {\r\n  \r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  loginWith(loginType:\"google\"|\"facebook\"){\r\n    switch (loginType) {\r\n      case \"google\":\r\n        authSvc.loginWithGoogle();\r\n        break;\r\n    \r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog open={true} fullScreen={false} >\r\n        <DialogTitle >\r\n          Login\r\n            </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            <List component=\"nav\">\r\n              <ListItem button onClick={e => this.loginWith(\"google\")}>\r\n                <ListItemIcon><i className=\"fab fa-google\"></i></ListItemIcon>\r\n                <ListItemText>Sign in with Google</ListItemText>\r\n              </ListItem>\r\n              <Tooltip title=\"Not supported\">\r\n                <ListItem button >\r\n                  <ListItemIcon><i className=\"fab fa-facebook\"></i></ListItemIcon>\r\n                  <ListItemText><del>Login with Facebook</del></ListItemText>\r\n                </ListItem>\r\n              </Tooltip>\r\n            </List>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n      </Dialog>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state:StoreState):LoginProps => ({\r\n  user:state.user\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch<any>):LoginProps => {\r\n  return {\r\n    dispatch:dispatch\r\n  }\r\n}\r\n\r\nconst connected = connect(mapStateToProps, mapDispatchToProps)(Login);\r\nexport default connected;\r\n","import firebaseSvc from \"./firebase.service\";\r\n\r\nclass FireStoreDatabase {\r\n\r\n  async getCollection<T>(collectionPath: string, qry: (collection: firebase.firestore.Query) => firebase.firestore.Query = null) {\r\n\r\n    let coll = this.firestore.collection(collectionPath) as firebase.firestore.Query;\r\n    if (qry) {\r\n      coll = qry(coll);\r\n    }\r\n\r\n    const snapshot = await coll.get();\r\n    let items: T[] = [];\r\n    snapshot.forEach(doc => {\r\n      let docData: any = doc.data();\r\n      docData.ID = doc.id;\r\n      items.push(docData);\r\n    });\r\n    (items as any[]).sort((a, b) => a.ID.localeCompare(b.ID));\r\n    return items;\r\n  }\r\n\r\n  async addToCollection<T>(collectionPath: string, item: T) {\r\n    const docRef = await this.firestore\r\n      .collection(collectionPath)\r\n      .add(item);\r\n    item['ID'] = docRef.id;\r\n    return item;\r\n  }\r\n\r\n  updateItem<T>(collectionPath: string, item: T) {\r\n    return this.firestore\r\n      .collection(collectionPath)\r\n      .doc(item['ID'])\r\n      .update(item);\r\n  }\r\n\r\n  removeItem<T>(collectionPath: string, item: T) {\r\n    return this.firestore\r\n      .collection(collectionPath)\r\n      .doc(item['ID'])\r\n      .delete();\r\n  }\r\n\r\n  firestore = firebaseSvc.firestore();\r\n}\r\n\r\nexport const databaseSvc = new FireStoreDatabase();","import React, { Component, Dispatch } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '../redux/store-state';\r\nimport { IReduxAction, ReduxAction } from '../redux/redux-action.class';\r\nimport { databaseSvc } from '../services/database.service';\r\nimport { INote } from '../models/note.interface';\r\nimport { Paper, InputBase, Icon, LinearProgress, List, ListItem, ListItemText, ButtonBase, Button, Divider, ListItemIcon } from '@material-ui/core';\r\nimport color from '@material-ui/core/colors/lime';\r\nimport { ActionTypes } from '../redux/action-types';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\ninterface Props extends StoreState{\r\n  notes?:INote[];\r\n  dispatch?:Dispatch<IReduxAction<any>>;\r\n  onSelectNote?:(note:INote)=>any\r\n  onAddNote?:(note:INote)=>any\r\n}\r\n\r\ninterface State{\r\n  loading?:boolean;\r\n  strSearch?:string;\r\n}\r\n\r\nclass NoteList extends Component<Props,State> {\r\n  constructor(p){\r\n    super(p);\r\n    this.state = {\r\n      strSearch:null\r\n    };\r\n  }\r\n\r\n  sbjSearch = new Subject();\r\n\r\n  componentDidMount(){\r\n    this.sbjSearch\r\n      .pipe(debounceTime(500))\r\n      .subscribe(()=>{\r\n        this.setState({...this.state,loading:false});\r\n        this.props.dispatch(new ReduxAction(ActionTypes.SET_SEARCH_QUERY, this.state.strSearch).value);\r\n      });\r\n  }\r\n\r\n  getFilterNotes(){\r\n    const selectedNoteID = this.props && this.props.selectedNote && this.props.selectedNote.ID || \"\";\r\n    const searchToLower = (this.props.strSearch||\"\").toLowerCase();\r\n    const filtered = (this.props.notes||[])\r\n                          .filter(n => \r\n                                    n.Body.toLowerCase().includes(searchToLower) ||\r\n                                    n.Title.toLocaleLowerCase().includes(searchToLower) ||\r\n                                    n.ID == selectedNoteID\r\n                                  );\r\n    return filtered;\r\n  }\r\n\r\n  onSearchChange = (e:React.ChangeEvent<HTMLInputElement>)=>{\r\n    this.setState({...this.state,loading:true,strSearch:e.target.value});\r\n    this.sbjSearch.next({});\r\n  }\r\n\r\n  onClickNote = (note:INote)=>{\r\n    this.props.onSelectNote && this.props.onSelectNote(note);\r\n  }\r\n\r\n  onClickAddNote = async ()=>{\r\n    const dummyTitle = 'NEW_NOTE_'+(new Date().getTime().toString());\r\n    let newNote:INote = {\r\n      Body:'',\r\n      Title:dummyTitle,\r\n      UID:this.props.user.uid\r\n    }\r\n    await databaseSvc.addToCollection('notes',newNote);\r\n    const newNoteList = [...this.props.notes, newNote];\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_NOTE_LIST,newNoteList).value);\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_SELECTED_NOTE, newNote).value);\r\n    setTimeout(() => {\r\n      const titleInput = document.querySelector('#txt-note-title') as HTMLInputElement;\r\n      titleInput.focus();\r\n      titleInput.select();\r\n    }, 100);\r\n  }\r\n\r\n  renderListItem(note:INote, index:number){\r\n    const selected = this.props.selectedNote == note;\r\n    return(\r\n      <ListItem button dense divider key={note.ID}\r\n        classes={({root:selected? 'list-item-note-selected':'list-item-note'})}\r\n        onClick={e=>this.onClickNote(note)} >\r\n        <ListItemText classes={({root:'note-item-text '+(selected&&'note-item-text-selected')})} >{note.Title}</ListItemText>\r\n      </ListItem>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { loading } = this.state;\r\n    const filteredNotes = this.getFilterNotes();\r\n    let strSearch = this.state.strSearch;\r\n\r\n    if(strSearch==null){\r\n      strSearch = this.props.strSearch || \"\";\r\n    }\r\n\r\n    return (\r\n      <div className=\"note-list-component\">\r\n        <div className=\"actions-bar-wrapper\">\r\n          <br/>\r\n        </div>\r\n        <Paper classes={({root:\"searchbar-paper\"})} >\r\n          <div className=\"search-input-wrapper\">\r\n            <InputBase onChange={this.onSearchChange}\r\n              value={strSearch} \r\n              classes={({root:\"search-input\"})} placeholder=\"Search..\"></InputBase>\r\n            <Icon fontSize=\"small\" classes={({root:'search-icon'})}>\r\n              <i style={({color:\"#a0a0a0\"})} className=\"fas fa-search\"></i>\r\n            </Icon>\r\n          </div>\r\n        </Paper>\r\n        <LinearProgress classes={({root:loading?\"search-progress-loading\":\"search-progress-complete\"})} \r\n          color=\"primary\">\r\n        </LinearProgress>\r\n        <div className=\"list-of-notes\">\r\n          <List>\r\n            <ListItem onClick={this.onClickAddNote} classes={({root:'add-note-btn'})} button dense divider>\r\n              <ListItemText classes={({root:'note-item-text'})} >ADD NOTE</ListItemText>\r\n              <ListItemIcon>\r\n                <i className=\"fas fa-plus-circle\"></i>\r\n              </ListItemIcon>              \r\n            </ListItem>\r\n            {filteredNotes.map((n,index) => this.renderListItem(n,index))}\r\n          </List>\r\n        </div>     \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state:StoreState):StoreState => ({\r\n  ...state\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  dispatch:dispatch\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteList)\r\n","import React, { Component, Dispatch } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport ReactQuill from 'react-quill';\r\nimport { StoreState } from '../redux/store-state';\r\nimport { Paper, TextField, Typography, Button, IconButton, Hidden, CircularProgress } from '@material-ui/core';\r\nimport { Subject } from 'rxjs';\r\nimport { IReduxAction, ReduxAction } from '../redux/redux-action.class';\r\nimport { ActionTypes } from '../redux/action-types';\r\nimport { INote } from '../models/note.interface';\r\nimport { async } from 'q';\r\nimport { databaseSvc } from '../services/database.service';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { Delta, Sources } from 'quill';\r\n\r\ninterface Props extends StoreState{\r\n  dispatch?:<T>(action:IReduxAction<T>)=>any;\r\n}\r\n\r\ninterface State{\r\n  loading?:boolean;\r\n}\r\n\r\nclass NoteEditor extends Component<Props, State> {\r\n\r\n  constructor(p){\r\n    super(p);\r\n    this.state = {};\r\n  }\r\n\r\n  sbjChange = new Subject();\r\n\r\n  componentWillMount(){\r\n    this.sbjChange.pipe(debounceTime(500))\r\n      .subscribe(async ()=>{\r\n        await databaseSvc.updateItem('notes', this.props.selectedNote);\r\n        this.setState({...this.state,loading:false});\r\n      });\r\n  }\r\n\r\n  onCloseNote = ()=>{\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_SELECTED_NOTE, null).value);\r\n  }\r\n\r\n  onDeleteNote = async (noteToDelete:INote)=>{\r\n    await databaseSvc.removeItem('notes',noteToDelete);\r\n    const newNoteList = this.props.notes.filter(n => n.ID!=noteToDelete.ID);\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_NOTE_LIST, newNoteList).value);\r\n    this.onCloseNote();\r\n  }\r\n\r\n  onTitleChange(title:string){\r\n    const note = this.props.selectedNote;\r\n    note.Title = title;\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_SELECTED_NOTE, note).value);\r\n    this.sbjChange.next();\r\n    this.setState({...this.state,loading:true});\r\n  }\r\n\r\n  onBodyChange(body:string,delta:Delta,source:Sources){\r\n    if(source!=\"user\"){\r\n      return;\r\n    }\r\n\r\n    const note = this.props.selectedNote;\r\n    note.Body = body;\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_SELECTED_NOTE, note).value);\r\n    this.sbjChange.next();\r\n    this.setState({...this.state,loading:true});\r\n  }\r\n\r\n  render() {\r\n    const { selectedNote } = this.props;\r\n    return (\r\n      <div className=\"note-editor-component\">\r\n        <Paper square>\r\n          <div className=\"title-wraper\">\r\n            <TextField id=\"txt-note-title\" onChange={e=>this.onTitleChange(e.target.value)} classes={({root:'txt-title'})} disabled={!selectedNote} label=\"Title\" value={selectedNote? selectedNote.Title:''}></TextField>\r\n            <IconButton disabled={!selectedNote} onClick={this.onCloseNote} color=\"default\">\r\n              <i style={({fontSize:'20px'})} className=\"fas fa-times-circle\"></i>\r\n            </IconButton>\r\n            <CircularProgress className={\"editor-save-progress \"+(!this.state.loading && \"hidden\")} />\r\n          </div>\r\n        </Paper>\r\n        <Paper classes={({root:\"quill-paper-wrapper\"})} square >\r\n          <ReactQuill onChange={(e,delta,source)=>this.onBodyChange(e,delta,source)} readOnly={!selectedNote} value={selectedNote? selectedNote.Body:''} placeholder=\"write your notes :)\" theme=\"snow\"></ReactQuill>\r\n          <IconButton onClick={e=>this.onDeleteNote(this.props.selectedNote)} classes={({root:\"delete-btn \"+(!selectedNote&&\"hidden\")})}>\r\n            <i style={({fontSize:'20px'})} className=\"fas fa-trash-alt\"></i>\r\n          </IconButton>\r\n        </Paper>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  ...state\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({dispatch})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteEditor)\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Toolbar, IconButton, Typography, Button, AppBar, Hidden, withWidth, Drawer, Grid, Tooltip } from '@material-ui/core';\r\nimport { Dispatch } from 'redux';\r\nimport { StoreState } from '../redux/store-state';\r\nimport { IReduxAction, ReduxAction } from '../redux/redux-action.class';\r\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\r\nimport authSvc from '../services/auth.service';\r\nimport { ActionTypes } from '../redux/action-types';\r\nimport NoteList from './NoteList';\r\nimport { INote } from '../models/note.interface';\r\nimport NoteEditor from './NoteEditor';\r\n\r\ninterface LayoutProps extends StoreState{\r\n  dispatch?:<T>(action:IReduxAction<T>)=>any,\r\n  width?:Breakpoint\r\n}\r\n\r\ninterface LayoutState {\r\n  drawerOpen?:boolean\r\n}\r\n\r\nclass Layout extends Component<LayoutProps, LayoutState> {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      drawerOpen:false\r\n    }\r\n  }\r\n\r\n  toggleDrawer = (isOpen:boolean = null)=>{\r\n    if(isOpen==null){\r\n      isOpen = !this.state.drawerOpen;\r\n    }\r\n\r\n    this.setState({...this.state,drawerOpen:isOpen});\r\n  }\r\n\r\n  isMobile(){\r\n    return this.props.width==\"xs\" || this.props.width==\"sm\";\r\n  }\r\n\r\n  logout = async()=>{\r\n    await authSvc.logOut();\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_USER, null).value);\r\n  }\r\n\r\n  onSelectNote = (note:INote)=>{\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_SELECTED_NOTE, note).value);\r\n    this.toggleDrawer(false);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`layout-component ${(this.state.drawerOpen || !this.isMobile()) && \"drawer-open\"}`}>\r\n        <nav>\r\n          <Drawer anchor=\"left\" variant={this.isMobile()? \"temporary\":\"permanent\"} onClose={()=>this.toggleDrawer(false)} open={this.state.drawerOpen} classes={({paper:\"drawer-paper\"})} >\r\n            <NoteList onSelectNote={this.onSelectNote} ></NoteList>\r\n          </Drawer>\r\n        </nav>      \r\n        <AppBar color=\"primary\" position=\"relative\">\r\n          <Toolbar>\r\n            <Hidden only={[\"md\",\"lg\",\"xl\"]} >\r\n              <IconButton onClick={()=>this.toggleDrawer()} >\r\n                <i className=\"fas fa-bars\"></i>\r\n              </IconButton>   \r\n            </Hidden>\r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n              {this.props.user.email}  \r\n            </Typography>\r\n            <Tooltip title=\"Sign Out\" placement=\"left\" >\r\n              <IconButton onClick={this.logout} classes={({root:\"btn-logout\"})} >\r\n                <i style={({fontSize:\"20px\"})} className=\"fas fa-power-off\"></i>\r\n              </IconButton>\r\n            </Tooltip>            \r\n          </Toolbar>\r\n        </AppBar>\r\n        <div className=\"layout-content\">\r\n          <NoteEditor></NoteEditor>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state:StoreState):StoreState => ({\r\n    user:state.user\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch) => {\r\n  return {\r\n    dispatch:dispatch\r\n  } as LayoutProps;\r\n}\r\n\r\nconst connected = connect(mapStateToProps, mapDispatchToProps)(Layout);\r\nconst withWidthConnected = withWidth()(connected);\r\nexport default withWidthConnected;\r\n","import React, { Component, Dispatch } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '../redux/store-state';\r\nimport { ReduxAction, IReduxAction } from '../redux/redux-action.class';\r\nimport firebase from 'firebase';\r\nimport { ActionTypes } from '../redux/action-types';\r\nimport firebaseSvc from '../services/firebase.service';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Login from './Login';\r\nimport Layout from './Layout';\r\nimport { databaseSvc } from '../services/database.service';\r\nimport { INote } from '../models/note.interface';\r\n\r\ninterface AuthProtectorProps extends StoreState {\r\n  dispatch?:(action:IReduxAction<any>)=>any\r\n}\r\n\r\ninterface AuthProtectorState {\r\n  loading?: boolean;\r\n}\r\n\r\nclass AuthProtector extends Component<AuthProtectorProps, AuthProtectorState> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.checkAuth();\r\n  }\r\n\r\n  async checkAuth(){\r\n    this.setState({...this.state,loading:true});\r\n    firebaseSvc.auth().onAuthStateChanged(user => {\r\n      this.props.dispatch(new ReduxAction(ActionTypes.SET_USER, user).value);\r\n      this.setState({...this.state,loading:false});\r\n      if(user){\r\n        this.loadNotes();\r\n      }      \r\n    });\r\n  }\r\n\r\n  async loadNotes(){\r\n    const notes = await databaseSvc.getCollection<INote>(\"notes\", (qry)=>qry.where(\"UID\",\"==\",this.props.user.uid));\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_NOTE_LIST, notes).value);\r\n  }  \r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"giant-progress-container-wrapper\">\r\n          <div className=\"giant-progress-container\">\r\n            <CircularProgress\r\n              variant=\"indeterminate\"\r\n              size={200}\r\n              value={50}\r\n              color=\"primary\"\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.props.user == null) {\r\n      return (\r\n        <div className=\"flex-hbox login-wrapper\">\r\n          <Login></Login>\r\n\t\t\t\t</div>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout></Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState): AuthProtectorProps => ({\r\n  user: state.user\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch<any>):AuthProtectorProps => {\r\n  return {\r\n    dispatch:dispatch\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthProtector)\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport '../stylesheets/App.scss';\nimport 'react-quill/dist/quill.snow.css';\nimport 'react-quill/dist/quill.core.css';\nimport '@material-ui/core'\nimport firebase from 'firebase';\nimport { Button, CssBaseline } from '@material-ui/core';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport AuthProtector from './AuthProtector';\n\nconst theme = createMuiTheme({\n  palette:{\n    type: 'dark',\n    primary:{\n      main:'#673ab7'\n    },\n    secondary: {\n      main: '#00e5ff',\n    }\n  }\n});\n\ninterface AppProps{\n\n}\n\nclass App extends Component<AppProps> {\n  constructor(props){\n    super(props);\n\n  }\n\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n          <CssBaseline/>\n          <AuthProtector></AuthProtector>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport App from './components/App';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}