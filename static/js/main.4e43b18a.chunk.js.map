{"version":3,"sources":["redux/actions.ts","services/firebase.service.ts","services/auth.service.ts","components/auth-login.component.tsx","redux/reducers.ts","redux/index.ts","components/navbar.component.tsx","services/database.service.ts","components/note-list.component.tsx","components/note-viewer.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypes","firebaseService","FireBaseService","Object","classCallCheck","this","googleAuthProvider","firebase","initializeApp","apiKey","process","authDomain","projectId","firestore","settings","timestampsInSnapshots","auth","GoogleAuthProvider","authService","signOut","signInWithRedirect","Promise","resolve","unsubscribe","onAuthStateChanged","user","currentUser","getRedirectResult","AuthLogin","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","loginGoogleLoading","e","googleLoading","loginGoogle","catch","_this2","_this3","react_default","a","createElement","className","disabled","onClick","val","setState","objectSpread","Component","setUser","type","SET_USER","data","setActiveNote","noteID","SET_ACTIVE_NOTE","combinedReducers","combineReducers","userState","action","activeNoteID","activeNoteIDState","store","createStore","Navbar","logout","dispatch","email","connectedApp","connect","dbService","FireStoreDatabase","collectionPath","qry","arguments","length","undefined","coll","collection","get","then","snapshot","items","forEach","doc","docData","ID","id","push","sort","b","localeCompare","item","add","docRef","update","delete","NoteList","sbjSearch","Subject","subs","renderedNotesRef","React","createRef","onSearchChange","bind","assertThisInitialized","filterResults","renderNote","filterText","pipe","debounceTime","subscribe","changeFilterText","filter","txtFilter","toLowerCase","notes","note","titleMatched","Title","toLocaleLowerCase","includes","BodyMatched","Body","ev","next","target","value","sub","onSelectNote","dateAdded","Date","addNoteLoading","newNote","toLocaleString","UID","uid","addToCollection","result","onAddNote","renderNotesDiv","current","activeNote","querySelector","scrollIntoView","key","onClickNote","onChange","placeholder","ref","map","addNote","NoteViewer","_Component","sbjNoteBody","sbjNoteTitle","content","onTitleChange","onBodyChange","txtTitle","txtBody","inherits","createClass","nextProps","title","onTitleInput","delta","source","onBodyInput","showProgress","role","style","width","changeTitle","onClickDelete","lib_default","readOnly","onQuillChange","App","console","log","getState","initAppAndAuth","appReady","document","addEventListener","keyCode","navigator","platform","match","metaKey","ctrlKey","preventDefault","saveNote","getAuthState","loadNotes","body","selectedNote","saving","updateItem","notesWithRemovedDeleted","noteItem","removeItem","getCollection","where","auth_login_component_AuthLogin","components_note_list_component","handleNewNote","selectNote","note_viewer_component_NoteViewer","handleDeleteNote","saveNoteTitle","saveNoteBody","components_navbar_component","renderAppBody","renderAuth","Boolean","window","location","hostname","ReactDOM","render","es","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e43b18a.chunk.js","sourcesContent":["/*\r\n * action types\r\n */\r\nexport enum ActionTypes {\r\n  SET_USER = 'SET_USER',\r\n  SET_ACTIVE_NOTE = 'SET_ACTIVE_NOTE'\r\n}\r\n\r\n/*\r\n * action interface\r\n * where AD is the action data\r\n */\r\nexport interface ReduxAction<DataType>{\r\n  type: ActionTypes;\r\n  data: DataType\r\n}\r\n\r\n\r\nexport function setUser(user:firebase.User){\r\n  let ra:ReduxAction<firebase.User> = {\r\n    type: ActionTypes.SET_USER,\r\n    data: user\r\n  };\r\n  return ra;\r\n}\r\n\r\nexport function setActiveNote(noteID:string){\r\n  let ra:ReduxAction<string> = {\r\n    type: ActionTypes.SET_ACTIVE_NOTE,\r\n    data: noteID\r\n  }\r\n  return ra;\r\n}","import firebase from 'firebase';\r\n\r\nclass FireBaseService {\r\n\tconstructor() {\r\n\t\tvar config = {\r\n\t\t\tapiKey: process.env.REACT_APP_APIKEY,\r\n\t\t\tauthDomain: process.env.REACT_APP_AUTHDOMAIN,\r\n\t\t\tprojectId: process.env.REACT_APP_PROJECTID\r\n\t\t};\r\n\r\n\t\tfirebase.initializeApp(config);\r\n\t\tvar db = firebase.firestore();\r\n\t\tdb.settings({\r\n\t\t\ttimestampsInSnapshots: true\r\n\t\t});\r\n\t\tthis.googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n\t}\r\n\r\n\tgoogleAuthProvider:firebase.auth.GoogleAuthProvider;\r\n}\r\n\r\nexport const firebaseService = new FireBaseService();","import { firebaseService } from \"./firebase.service\";\r\nimport firebase from \"firebase\";\r\n\r\nclass AuthService{\r\n\r\n    logout(){\r\n        return firebase.auth().signOut();\r\n    }\r\n\r\n    loginGoogle(){\r\n        return firebase.auth().signInWithRedirect(firebaseService.googleAuthProvider);\r\n    }\r\n\r\n    getAuthState(){\r\n        return new Promise<firebase.User>((resolve)=>{\r\n            let unsubscribe = firebase.auth()\r\n                    .onAuthStateChanged(user=>{\r\n                        resolve(user);\r\n                        unsubscribe();\r\n                    });\r\n        });\r\n    }\r\n\r\n    getUser(){\r\n        return firebase.auth().currentUser;\r\n    }\r\n\r\n    getRedirectResult(){\r\n        return firebase.auth().getRedirectResult();\r\n    }\r\n}\r\n\r\nexport const authService = new AuthService();","import React, { Component } from 'react';\r\nimport { authService } from '../services/auth.service';\r\nimport { setUser } from '../redux/actions';\r\nimport './auth-login.component.scss';\r\n\r\ninterface AuthLoginState{\r\n  loginGoogleLoading:boolean\r\n}\r\n\r\nexport default class AuthLogin extends Component<any, AuthLoginState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loginGoogleLoading: false\r\n    };\r\n  }\r\n\r\n  get googleLoading():boolean {\r\n    return this.state.loginGoogleLoading;\r\n  }\r\n  set googleLoading(val: boolean) {\r\n    this.setState({ ...this.state, loginGoogleLoading: val } as any)\r\n  }\r\n\r\n  async loginGoogle(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n    this.googleLoading = true;\r\n    await authService.loginGoogle().catch(e => this.googleLoading = false);\r\n    this.googleLoading = false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mt-5\">\r\n        <div className=\"text-center\">\r\n          <h4>Sign in to ArNotes</h4>\r\n        </div>\r\n        <div className=\"auth-login card ml-5 mr-5 mt-4 mx-auto p-5\">\r\n          <button disabled={this.googleLoading} onClick={(e) => this.loginGoogle(e)} className=\"btn btn-signin btn-block btn-danger\">\r\n            {!this.googleLoading && 'Login with Google' || 'loading...'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { ReduxAction, ActionTypes } from \"./actions\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nexport interface StoreState {\r\n  user: firebase.User,\r\n  activeNoteID?: string\r\n}\r\n\r\nconst initialState: StoreState = {\r\n  user: null\r\n}\r\n\r\nfunction userRdc(userState:firebase.User, action:ReduxAction<firebase.User>) {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_USER:\r\n      return action.data as firebase.User;\r\n      break;\r\n  \r\n    default:\r\n      return userState || null;\r\n      break;\r\n  }\r\n}\r\n\r\nfunction activeNoteIDRdc(activeNoteIDState:string , action:ReduxAction<string>){\r\n  switch (action.type) {\r\n    case ActionTypes.SET_ACTIVE_NOTE:\r\n      return action.data;\r\n      break;\r\n  \r\n    default:\r\n      return activeNoteIDState || null; \r\n      break;\r\n  }\r\n}\r\n\r\nexport const combinedReducers = combineReducers({\r\n  user:userRdc,\r\n  activeNoteID: activeNoteIDRdc\r\n});","import { createStore } from 'redux'\r\nimport { combinedReducers } from './reducers';\r\n\r\nexport const store = createStore(combinedReducers, {});","import React, { Component } from 'react'\r\nimport { authService } from '../services/auth.service';\r\nimport { store } from '../redux';\r\nimport { setUser } from '../redux/actions';\r\nimport { StoreState } from '../redux/reducers';\r\nimport { connect } from 'react-redux';\r\nimport './navbar.component.scss';\r\n\r\ninterface NavbarProps{\r\n    user?:firebase.User;\r\n}\r\n\r\nclass Navbar extends Component<NavbarProps> {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    async logout(){\r\n        await authService.logout();\r\n        store.dispatch(setUser(null));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-primary\">\r\n                { \r\n                    this.props.user &&\r\n                    <h5 className=\"text-white user-banner\" onClick={this.logout} >\r\n                        {this.props.user.email} <i className=\"fas fa-sign-out-alt\"></i>\r\n                    </h5> ||\r\n                    <h5 className=\"text-white\">{'\\u00A0'}</h5>\r\n                }\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:StoreState):NavbarProps =>{\r\n    return{\r\n        user: state.user\r\n    }\r\n}\r\n\r\nconst connectedApp = connect(mapStateToProps)(Navbar) as typeof Navbar;\r\n\r\nexport default connectedApp;\r\n","import { firebaseService } from \"./firebase.service\";\r\nimport firebase from \"firebase\";\r\n\r\nclass FireStoreDatabase{\r\n    constructor(){};\r\n\r\n    getCollection<T>(collectionPath:string, qry:(collection:firebase.firestore.Query)=>firebase.firestore.Query = null){\r\n        \r\n        let coll = firebase.firestore().collection(collectionPath) as firebase.firestore.Query;\r\n        if(qry){\r\n            coll = qry(coll);\r\n        }\r\n\r\n        return coll.get().then(snapshot => {\r\n            let items:T[] = [];\r\n            snapshot.forEach(doc=>{\r\n                let docData:any = doc.data();\r\n                docData.ID = doc.id;\r\n                items.push(docData);\r\n            });\r\n            (items as any[]).sort((a,b) => a.ID.localeCompare(b.ID));\r\n            return items;\r\n        });\r\n    }\r\n\r\n    addToCollection<T>(collectionPath:string, item:T){\r\n        return firebase.firestore()\r\n                .collection(collectionPath)\r\n                .add(item)\r\n                .then(docRef=>{\r\n                    item['ID'] = docRef.id;\r\n                    return item;\r\n                });\r\n    }\r\n\r\n    updateItem<T>(collectionPath:string, item:T){\r\n        return firebase.firestore()\r\n                .collection(collectionPath)\r\n                .doc(item['ID'])\r\n                .update(item);\r\n    }\r\n\r\n    removeItem<T>(collectionPath:string, item:T){\r\n        return firebase.firestore()\r\n                .collection(collectionPath)\r\n                .doc(item['ID'])\r\n                .delete();\r\n    }\r\n}\r\n\r\nexport const dbService = new FireStoreDatabase();\r\n","import React, { Component } from 'react'\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\nimport { debounce, debounceTime } from 'rxjs/operators';\r\nimport { firebaseService } from '../services/firebase.service';\r\nimport { dbService } from '../services/database.service';\r\nimport { INote } from '../models/note.interface';\r\nimport { StoreState } from '../redux/reducers';\r\nimport { connect } from 'react-redux';\r\nimport { store } from '../redux';\r\nimport { setActiveNote } from '../redux/actions';\r\nimport './note-list.component.scss';\r\n\r\ninterface NoteListProps {\r\n    notes?: INote[],\r\n    activeNoteID?: string,\r\n    onSelectNote?: (note: INote) => any,\r\n    onAddNote?: (note: INote) => any,\r\n    onMount?: (component:any) => any,\r\n    user?: firebase.User\r\n}\r\n\r\ninterface NoteListState {\r\n    addNoteLoading?: boolean,\r\n    filterText?: string\r\n}\r\n\r\nclass NoteList extends Component<NoteListProps, NoteListState> {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.onSearchChange = this.onSearchChange.bind(this);\r\n        this.filterResults = this.filterResults.bind(this);\r\n        this.renderNote = this.renderNote.bind(this);\r\n\r\n        this.state = {\r\n            filterText: \"\"\r\n        };\r\n\r\n        this.sbjSearch.pipe(debounceTime(500)).subscribe(val => this.changeFilterText(val));\r\n\r\n    }\r\n\r\n\r\n    private sbjSearch = new Subject<string>();\r\n    private subs: Subscription[] = [];\r\n    private renderedNotesRef = React.createRef();\r\n\r\n    changeFilterText(filter:string){\r\n        this.setState({...this.state, filterText:filter});\r\n    }\r\n\r\n    filterResults() {\r\n        let txtFilter = this.state.filterText.toLowerCase();\r\n        let filtered = (this.props.notes||[]).filter(note => {\r\n            let titleMatched = note.Title.toLocaleLowerCase().includes(txtFilter);\r\n            let BodyMatched = note.Body.toLocaleLowerCase().includes(txtFilter);\r\n            return !txtFilter || titleMatched || BodyMatched;\r\n        });\r\n        return filtered;\r\n    }\r\n\r\n\r\n\r\n    onSearchChange(ev: React.ChangeEvent<HTMLInputElement>) {\r\n        this.sbjSearch.next(ev.target.value);\r\n    }\r\n\r\n    componentWillMount() {\r\n        //this.loadNotes();\r\n        //this.props.onMount && this.props.onMount(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.subs && this.subs.forEach(sub => sub.unsubscribe());\r\n    }\r\n\r\n    onClickNote(note: INote) {\r\n        store.dispatch(setActiveNote(note.ID));\r\n        this.props.onSelectNote && this.props.onSelectNote(note);\r\n    }\r\n\r\n    async addNote() {\r\n        let dateAdded = new Date();\r\n        this.setState({ ...this.state, addNoteLoading: true });\r\n        let newNote: INote = {\r\n            Body: '',\r\n            Title: 'New Note - ' + (dateAdded.toLocaleString()),\r\n            UID: this.props.user.uid\r\n        };\r\n        let result = await dbService.addToCollection('notes', newNote);\r\n        this.props.onAddNote && this.props.onAddNote(result);\r\n        let currentNotes = this.props.notes;\r\n        currentNotes.push(result);\r\n        store.dispatch(setActiveNote(result.ID));\r\n        let renderNotesDiv = this.renderedNotesRef.current as HTMLDivElement;\r\n        let activeNote = renderNotesDiv.querySelector('.active');\r\n        activeNote && activeNote.scrollIntoView();\r\n        this.setState({ ...this.state, addNoteLoading: false });\r\n    }\r\n\r\n    renderNote(note: INote) {\r\n        return (\r\n            <button key={note.ID}\r\n                type=\"button\"\r\n                onClick={e => this.onClickNote(note)}\r\n                className={\"list-group-item-action list-group-item \" + (this.props.activeNoteID == note.ID && \"active list-group-item-info\")}>\r\n                {note.Title || '\\u00A0' }\r\n            </button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card note-list-container flex-h-take flex-h-box\">\r\n                <ul className=\"list-group flex-h-take flex-h-box\">\r\n                    <li className=\"list-group-item\">\r\n                        <div className=\"input-group flex-nowrap\">\r\n                            <input onChange={this.onSearchChange}\r\n                                type=\"search\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Search notes...\" />\r\n                        </div>\r\n                    </li>\r\n                    <div className=\"rendered-notes flex-h-take\" ref={this.renderedNotesRef as any}>\r\n                        {this.filterResults().sort((a,b)=>a.Title.localeCompare(b.Title)).map(note => this.renderNote(note))}\r\n                    </div>\r\n                    <button type=\"button\" disabled={this.state.addNoteLoading} onClick={this.addNote.bind(this)} className=\"active list-group-item-success list-group-item list-group-item-action\">\r\n                        Add Note <i className=\"fas fa-plus-square\"></i>\r\n                    </button>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: StoreState): NoteListProps => {\r\n    return {\r\n        activeNoteID: state.activeNoteID,\r\n        user: state.user\r\n    }\r\n};\r\n\r\nconst connectedApp = connect(mapStateToProps)(NoteList) as typeof NoteList;\r\nexport default connectedApp;","import React, { Component } from 'react';\r\nimport ReactQuill from 'react-quill'; // Typescript\r\nimport { Delta, Sources } from 'quill';\r\nimport { INote } from '../models/note.interface';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport './note-viewer.component.scss';\r\n\r\ninterface NoteViewerProps {\r\n\tshowProgress?:boolean,\r\n\tnote?: INote,\r\n\tonTitleChange?: (title: string) => any,\r\n\tonTitleInput?: (title: string) => any,\r\n\tonBodyChange?: (body: string) => any,\r\n\tonBodyInput?: (body: string) => any,\r\n\tonClickDelete?: (note: INote) => any\r\n}\r\n\r\ninterface NoteViewerState {\r\n\ttxtTitle?: string;\r\n\ttxtBody?: string;\r\n}\r\n\r\nexport class NoteViewer extends Component<NoteViewerProps, NoteViewerState> {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.sbjNoteTitle.pipe(debounceTime(500)).subscribe(content => {\r\n\t\t\tthis.props.onTitleChange && this.props.onTitleChange(content)\r\n\t\t});\r\n\r\n\t\tthis.sbjNoteBody.pipe(debounceTime(500)).subscribe(content => {\r\n\t\t\tthis.props.onBodyChange && this.props.onBodyChange(content)\r\n\t\t});\r\n\r\n\t\tthis.state = {\r\n\t\t\ttxtTitle: this.props.note ? this.props.note.Title : '',\r\n\t\t\ttxtBody: this.props.note ? this.props.note.Body : ''\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(nextProps: NoteViewerProps) {\r\n\t\tthis.setState({\r\n\t\t\t...this.state,\r\n\t\t\ttxtTitle: nextProps.note ? nextProps.note.Title : '',\r\n\t\t\ttxtBody: nextProps.note ? nextProps.note.Body : ''\r\n\t\t});\r\n\t}\r\n\r\n\tprivate sbjNoteBody = new Subject<string>();\r\n\tprivate sbjNoteTitle = new Subject<string>();\r\n\r\n\tchangeTitle(title: string) {\r\n\t\tlet note = this.props.note;\r\n\t\tnote.Title = title;\r\n\t\tthis.setState({\r\n\t\t\t...this.state,\r\n\t\t\ttxtTitle: title\r\n\t\t});\r\n\t\tthis.props.onTitleInput && this.props.onTitleInput(title);\r\n\t\tthis.sbjNoteTitle.next(title);\r\n\t}\r\n\r\n\tonQuillChange(content: string, delta: Delta, source: Sources) {\r\n\t\tif(source!==\"user\"){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet note = this.props.note;\r\n\t\tnote.Body = content;\r\n\t\tthis.setState({\r\n\t\t\t...this.state,\r\n\t\t\ttxtBody: content\r\n\t\t});\r\n\t\tthis.props.onBodyInput && this.props.onBodyInput(content);\r\n\t\tthis.sbjNoteBody.next(content);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"note-viewer-container flex-h-take flex-h-box\">\r\n\t\t\t\t<div className=\"card p-3 flex-h-take flex-h-box\">\r\n\t\t\t\t\t<div className={\"progress save-progress \"+(this.props.showProgress  && \" show-progress\")}>\r\n\t\t\t\t\t\t<div className=\"progress-bar progress-bar-striped progress-bar-animated bg-success\" \r\n\t\t\t\t\t\t\trole=\"progressbar\"  \r\n\t\t\t\t\t\t\tstyle={({width: '100%'})} >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\t\t\t\t\r\n\t\t\t\t\t<div className=\"input-group flex-nowrap\">\r\n\t\t\t\t\t\t<input value={this.state.txtTitle}\r\n\t\t\t\t\t\t\tonChange={e => this.changeTitle(e.target.value)}\r\n\t\t\t\t\t\t\tdisabled={!this.props.note}\r\n\t\t\t\t\t\t\tplaceholder=\"Title...\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tclassName=\"form-control\" />\r\n\t\t\t\t\t\t<div className=\"input-group-append\">\r\n\t\t\t\t\t\t\t<button onClick={e => this.props.note && this.props.onClickDelete && this.props.onClickDelete(this.props.note)}\r\n\t\t\t\t\t\t\t\t\ttype=\"button\" \r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger\" \r\n\t\t\t\t\t\t\t\t\tdisabled={!this.props.note}>\r\n\t\t\t\t\t\t\t\t<i className=\"fas fa-trash-alt\"></i>\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<div className=\"react-quill-wrapper flex-h-take flex-h-box\">\r\n\t\t\t\t\t\t<ReactQuill readOnly={!this.props.note} \r\n\t\t\t\t\t\t\tvalue={this.state.txtBody} \r\n\t\t\t\t\t\t\tonChange={this.onQuillChange.bind(this)} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default NoteViewer\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport logo from './logo.svg';\r\nimport './App.scss';\r\nimport 'react-quill/dist/quill.snow.css'; // ES6\r\nimport AuthLogin from './components/auth-login.component';\r\nimport { authService } from './services/auth.service';\r\nimport { StoreState } from './redux/reducers';\r\nimport { store } from './redux';\r\nimport { setUser, setActiveNote } from './redux/actions';\r\nimport Navbar from './components/navbar.component';\r\nimport NoteList from './components/note-list.component';\r\nimport { INote } from './models/note.interface';\r\nimport { NoteViewer } from './components/note-viewer.component';\r\nimport { dbService } from './services/database.service';\r\n\r\ninterface AppProps {\r\n  user?: firebase.User;\r\n}\r\n\r\ninterface AppState {\r\n  appReady: boolean,\r\n  selectedNote?: INote,\r\n  saving?: boolean,\r\n  notes?: INote[]\r\n}\r\n\r\nclass App extends Component<AppProps, AppState> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    store.subscribe(() => console.log('getState', store.getState()));\r\n    this.initAppAndAuth();\r\n    this.state = {\r\n      appReady: false,\r\n      notes: []\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", (e) => {\r\n      if (e.keyCode == 83 && (navigator.platform.match(\"Mac\") ? e.metaKey : e.ctrlKey)) {\r\n        e.preventDefault();\r\n        this.saveNote();\r\n      }\r\n    }, false);\r\n  }\r\n\r\n  async initAppAndAuth() {\r\n    await authService.getRedirectResult();\r\n    let user = await authService.getAuthState();\r\n\r\n    store.dispatch(setUser(user));\r\n    if (user) {\r\n      await this.loadNotes();\r\n    }\r\n    this.setState({ ...this.state, appReady: true });\r\n  }\r\n\r\n  async saveNoteBody(body: string) {\r\n    let note = this.state.selectedNote;\r\n    note.Body = body;\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      selectedNote: note\r\n    });\r\n    await this.saveNote();\r\n  }\r\n\r\n  async saveNoteTitle(title: string) {\r\n    let note = this.state.selectedNote;\r\n    note.Title = title;\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      selectedNote: note\r\n    });\r\n    await this.saveNote();\r\n  }\r\n\r\n  async saveNote(){\r\n    if(!this.state.selectedNote){\r\n      return;\r\n    }\r\n    \r\n    this.setState({\r\n      ...this.state,\r\n      saving: true\r\n    });\r\n    await dbService.updateItem('notes', this.state.selectedNote);\r\n    this.setState({\r\n      ...this.state,\r\n      saving: false\r\n    });    \r\n  }\r\n\r\n  selectNote(note: INote) {\r\n    this.setState({ ...this.state, selectedNote: note });\r\n  }\r\n\r\n  handleNewNote(note: INote) {\r\n    this.setState({ ...this.state, selectedNote: note });\r\n  }\r\n\r\n  async handleDeleteNote(note: INote) {\r\n    let notesWithRemovedDeleted = this.state.notes.filter(noteItem => noteItem.ID != note.ID);\r\n    store.dispatch(setActiveNote(null));\r\n    this.setState({ ...this.state, selectedNote: null, notes: notesWithRemovedDeleted });\r\n    dbService.removeItem('notes', note);\r\n  }\r\n\r\n  async loadNotes() {\r\n    dbService.getCollection<INote>('notes', qry => qry.where('UID', '==', this.props.user.uid)).then(notes => {\r\n      this.setState({ ...this.state, notes: notes });\r\n    });\r\n  }\r\n\r\n  renderAuth() {\r\n    return <AuthLogin />;\r\n  }\r\n\r\n  renderAppBody() {\r\n    return (\r\n      <div className=\"container-fluid flex-h-take flex-h-box pt-4 pb-4\">\r\n        <div className=\"row flex-h-take\">\r\n          <div className=\"col-xs-6 col-sm-5 col-md-4 col-lg-3 flex-h-box\">\r\n            <NoteList notes={this.state.notes} onAddNote={this.handleNewNote.bind(this)} onSelectNote={this.selectNote.bind(this)} ></NoteList>\r\n          </div>\r\n          <div className=\"col-xs-6 col-sm-7 col-md-8 col-lg-9 flex-h-box\">\r\n            <NoteViewer onClickDelete={e => this.handleDeleteNote(e)}\r\n              onTitleChange={e => this.state.selectedNote && this.saveNoteTitle(e)}\r\n              onBodyChange={e => this.state.selectedNote && this.saveNoteBody(e)}\r\n              showProgress={this.state.saving}\r\n              note={this.state.selectedNote} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.appReady) {\r\n      return (\r\n        <div>loading...</div>\r\n      );\r\n    }\r\n    return (\r\n      <div id=\"app-container\" className=\"flex-h-box\">\r\n        <Navbar/>\r\n        {this.props.user ? this.renderAppBody() : this.renderAuth()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState): AppProps => {\r\n  return {\r\n    user: state.user\r\n  }\r\n}\r\n\r\nconst connectedApp = connect(mapStateToProps)(App);\r\n\r\nexport default connectedApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}