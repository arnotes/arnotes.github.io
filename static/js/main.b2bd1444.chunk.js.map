{"version":3,"sources":["serviceWorker.ts","redux/action-types.ts","redux/reducers.ts","redux/store.ts","redux/redux-action.class.ts","services/firebase.service.ts","services/auth.service.ts","components/Login.tsx","services/database.service.ts","components/TextDialog.tsx","components/Draggable.tsx","components/Folder.tsx","hooks/useConfirmDialog.tsx","components/Droppable.tsx","components/NoteList.tsx","components/NoteEditor.tsx","components/Layout.tsx","components/AuthProtector.tsx","components/App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ActionTypes","combinedReducers","combineReducers","user","userState","action","type","SET_USER","data","notes","SET_NOTE_LIST","Object","toConsumableArray","folders","SET_FOLDER_LIST","strSearch","str","SET_SEARCH_QUERY","filteredNotes","returnVal","SET_FILTERED_NOTE_LIST","sort","a","b","Title","toLowerCase","localeCompare","selectedNote","note","SET_SELECTED_NOTE","openFolders","SET_OPEN_FOLDERS","objectSpread","devTools","__REDUX_DEVTOOLS_EXTENSION__","undefined","store","createStore","ReduxAction","classCallCheck","this","createClass","key","firebaseSvc","firebase","initializeApp","apiKey","authDomain","projectId","authSvc","AuthService","auth","googleAuthProvider","GoogleAuthProvider","signInWithRedirect","signOut","Login","props","possibleConstructorReturn","getPrototypeOf","call","loginType","loginWithGoogle","_this","react_default","createElement","index_es","open","fullScreen","component","button","onClick","e","loginWith","className","title","Component","connected","connect","dispatch","databaseSvc","firestore","collectionPath","qry","coll","collection","snapshot","items","forEach","doc","docData","ID","id","push","item","add","docRef","update","batch","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","itemDocRef","err","return","commit","delete","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","TextDialog","_React$useState","React","_React$useState2","slicedToArray","setValue","_React$useState3","_React$useState4","setOpen","responseStream","Subject","show","initialValue","arguments","length","pipe","take","toPromise","respondAndClose","setShow","react","style","minWidth","label","fullWidth","onChange","target","margin","Draggable","ref","current","model","$","draggable","handle","revert","revertDuration","axis","children","d","menuAnchor","setMenuAnchor","regex","RegExp","folder","filter","n","Body","FolderID","checkedNotes","_useConfirmDialog","_useState","useState","_useState2","setopen","_useState3","_useState4","header","setheader","_useState5","_useState6","subheader","setsubheader","stream","useMemo","showDialog","useCallback","respond","res","useConfirmDialog","_useConfirmDialog2","showConfirm","confirmDialog","showTextDialog","handleNoteCheckChange","checked","onCheckNote","handleClickMenu","preventDefault","stopPropagation","handleMenuClose","handleExpandChange","event","handleAddNote","onClickAddNote","handleDeleteNotes","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","sent","onClickDeleteNotes","stop","handleDeleteFolder","_callee2","_context2","Name","onClickDeleteFolder","handleRename","_callee3","_context3","onUpdateFolder","ExpansionPanel_default","expanded","ExpansionPanelSummary_default","expandIcon","color","showZero","badgeContent","Typography_default","ExpansionPanelDetails_default","paddingLeft","paddingRight","classes","root","dense","disablePadding","width","map","index","divider","selected","padding","includes","primary","size","anchorEl","onClose","fn","Droppable","droppable","accept","drop","ui","onJqDrop","NoteList","p","sbjSearch","onSearchChange","setState","loading","onClickNote","onSelectNote","_ref","folderID","dummyTitle","newNote","newNoteList","Date","getTime","toString","UID","uid","addToCollection","toast","info","position","hideProgressBar","autoClose","setTimeout","titleInput","document","querySelector","focus","select","_x","apply","notesToDelete","removeMany","onClickAddFolder","newFolder","_ref4","_callee4","newFolderList","notesFromFolder","_context4","f","removeItem","updateMany","_x2","onNoteListCheck","_ref5","_callee5","ix","_context5","findIndex","updateItem","_x3","onDropToFolder","_ref6","_callee6","_context6","_x4","_x5","willFolderAcceptNote","_this2","debounceTime","subscribe","selectedNoteID","searchToLower","slice","toLocaleLowerCase","_this3","foldersWithGeneral","placeholder","fontSize","components_Folder","NoteEditor","sbjChange","currentNoteID","onCloseNote","onDeleteNote","noteToDelete","onBodyChange","text","body","readonly","copyClipboard","copyhelper","appendChild","execCommand","removeChild","drawerOpen","prop","upcomingNoteID","isReadOnlyChecked","IsReadOnly","_this$state","square","onTitleChange","disabled","ts","init","paste_data_images","skin","content_css","height","menubar","plugins","toolbar","onEditorChange","control","isOpen","onReadOnlyChange","components_NoteEditor","es","AuthProtector","Layout","toggleDrawer","checkAuth","auth_service","logOut","redux_action_class_ReduxAction","onAuthStateChanged","loadNotes","anchor","variant","getCollection","logout","mapStateToProps","Layout_Layout","mapDispatchToProps","AuthProtector_AuthProtector","_Component","inherits","_checkAuth","firebase_service","_loadNotes","where","t0","t1","t2","t3","t4","t5","t6","t7","t8","t9","CircularProgress_default","components_Login","components_Layout","components_AuthProtector","ReactDOM","palette","main","components_App","App","getElementById","styles","theme","lib","react_dom_default","render"],"mappings":"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","file":"static/js/main.b2bd1444.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\nregister();","export enum ActionTypes {\r\n  SET_USER = 'SET_USER',\r\n  SET_ACTIVE_NOTE = 'SET_ACTIVE_NOTE',\r\n  SET_NOTE_LIST = 'SET_NOTE_LIST',\r\n  SET_FOLDER_LIST = 'SET_FOLDER_LIST',\r\n  SET_FILTERED_NOTE_LIST = 'SET_FILTERED_NOTE_LIST',\r\n  SET_SEARCH_QUERY = 'SET_SEARCH_QUERY',\r\n  SET_SELECTED_NOTE = 'SET_SELECTED_NOTE',\r\n  SET_SEARCHINPUT_FOCUS_STATE = 'SET_SEARCHINPUT_FOCUS_STATE',\r\n  SET_OPEN_FOLDERS = 'SET_OPEN_FOLDERS'\r\n}","import { ReduxAction, IReduxAction } from \"./redux-action.class\";\r\nimport { ActionTypes } from \"./action-types\";\r\nimport { combineReducers } from \"redux\";\r\nimport { INote } from \"../models/note.interface\";\r\nimport { StoreState } from \"./store-state\";\r\nimport { IFolder } from \"../models/folder.interface\";\r\nimport { IDictionary } from \"../models/dictionary.interface\";\r\n\r\nfunction user(userState:firebase.User, action:IReduxAction<firebase.User>) {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_USER:\r\n      return action.data as firebase.User;\r\n      break;\r\n  \r\n    default:\r\n      return userState || null;\r\n      break;\r\n  }\r\n}\r\n\r\nfunction notes(notes:INote[], action:IReduxAction<INote[]>){\r\n  switch (action.type) {\r\n    case ActionTypes.SET_NOTE_LIST:\r\n      return [...action.data];\r\n      break;\r\n  \r\n    default:\r\n      return notes||[];\r\n      break;\r\n  }\r\n}\r\n\r\nfunction folders(folders:IFolder[], action:IReduxAction<IFolder[]>){\r\n  switch (action.type){\r\n    case ActionTypes.SET_FOLDER_LIST:\r\n      return [...action.data];\r\n      break;\r\n    default:\r\n      return folders||[];\r\n      break;      \r\n  }\r\n}\r\n\r\nfunction filteredNotes(notes:INote[], action:IReduxAction<INote[]>){\r\n  let returnVal:INote[] = [];\r\n  switch (action.type) {\r\n    case ActionTypes.SET_FILTERED_NOTE_LIST:\r\n      if(action.data){\r\n        returnVal = [...action.data];\r\n      }\r\n      break;\r\n  \r\n    default:\r\n      if(notes){\r\n        returnVal = [...notes];\r\n      }\r\n      break;\r\n  }\r\n\r\n  return returnVal.sort((a,b)=>a.Title.toLowerCase().localeCompare(b.Title.toLowerCase()));\r\n}\r\n\r\nfunction strSearch(str:string, action:IReduxAction<string>){\r\n  switch (action.type) {\r\n    case ActionTypes.SET_SEARCH_QUERY:\r\n      return action.data;\r\n      break;\r\n  \r\n    default:\r\n      return str||\"\";\r\n      break;\r\n  }\r\n}\r\n\r\nfunction selectedNote(note:INote, action:IReduxAction<INote>){\r\n  switch (action.type) {\r\n    case ActionTypes.SET_SELECTED_NOTE:\r\n      return action.data;\r\n      break;\r\n  \r\n    default:\r\n      return note||null;\r\n      break;\r\n  }\r\n}\r\n\r\nfunction openFolders(openFolders:IDictionary<boolean>, action:IReduxAction<IDictionary<boolean>>){\r\n  switch (action.type) {\r\n    case ActionTypes.SET_OPEN_FOLDERS:\r\n      return {...action.data};\r\n      break;\r\n  \r\n    default:\r\n      return openFolders || {};\r\n      break;\r\n  }\r\n}\r\n\r\nexport const combinedReducers = combineReducers({\r\n  user,\r\n  notes:notes,\r\n  folders,\r\n  strSearch:strSearch,\r\n  filteredNotes:filteredNotes,\r\n  selectedNote:selectedNote,\r\n  openFolders\r\n});","import { createStore } from 'redux';\r\nimport { combinedReducers } from './reducers';\r\nlet devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__();\r\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n  // dev code\r\n} else {\r\n  devTools = undefined;  \r\n}\r\nexport const store = createStore(combinedReducers, {}, devTools);","export interface IReduxAction<T> {\r\n    type: string;\r\n    data: T;\r\n}\r\n\r\nexport class ReduxAction<T> implements IReduxAction<T>{\r\n    constructor(type:string, data:T){\r\n        this.type = type;\r\n        this.data = data;\r\n    }\r\n\r\n    get value ():IReduxAction<T> {\r\n       return {\r\n           type: this.type,\r\n           data: this.data\r\n       }\r\n    }\r\n\r\n    type:string = null;\r\n    data:T = null;\r\n}","import firebase from 'firebase';\r\nconst firebaseSvc = firebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_APIKEY,\r\n        authDomain: process.env.REACT_APP_AUTHDOMAIN,\r\n        projectId: process.env.REACT_APP_PROJECTID\r\n});\r\n\r\nexport default firebaseSvc;","import firebaseSvc from \"./firebase.service\";\r\nimport firebase from \"firebase\";\r\n\r\nclass AuthService{\r\n    constructor(){\r\n        this.auth = firebaseSvc.auth();\r\n        this.googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n    }\r\n\r\n    private auth:firebase.auth.Auth;\r\n\r\n    loginWithGoogle(){\r\n        return this.auth.signInWithRedirect(this.googleAuthProvider);\r\n    }\r\n\r\n    logOut(){\r\n        return this.auth.signOut();\r\n    }\r\n\r\n    googleAuthProvider:firebase.auth.GoogleAuthProvider = null;\r\n}\r\n\r\nconst authSvc = new AuthService();\r\nexport default authSvc;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '../redux/store-state';\r\nimport { Dispatch } from 'redux';\r\nimport { Card, CardHeader, CardContent, Typography, Button, Dialog, DialogTitle, DialogContent, DialogContentText, List, ListItem, ListItemText, ListItemIcon, Icon, Tooltip } from '@material-ui/core';\r\nimport { IReduxAction } from '../redux/redux-action.class';\r\nimport withMobileDialog from '@material-ui/core/withMobileDialog';\r\nimport authSvc from '../services/auth.service';\r\n\r\ninterface LoginProps extends StoreState{\r\n    dispatch?:<T>(action:IReduxAction<T>)=>void,\r\n    fullScreen?:boolean\r\n}\r\n\r\nclass Login extends Component<LoginProps> {\r\n  \r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  loginWith(loginType:\"google\"|\"facebook\"){\r\n    switch (loginType) {\r\n      case \"google\":\r\n        authSvc.loginWithGoogle();\r\n        break;\r\n    \r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog open={true} fullScreen={false} >\r\n        <DialogTitle >\r\n          Login\r\n            </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            <List component=\"nav\">\r\n              <ListItem button onClick={e => this.loginWith(\"google\")}>\r\n                <ListItemIcon><i className=\"fab fa-google\"></i></ListItemIcon>\r\n                <ListItemText>Sign in with Google</ListItemText>\r\n              </ListItem>\r\n              <Tooltip title=\"Not supported\">\r\n                <ListItem button >\r\n                  <ListItemIcon><i className=\"fab fa-facebook\"></i></ListItemIcon>\r\n                  <ListItemText><del>Login with Facebook</del></ListItemText>\r\n                </ListItem>\r\n              </Tooltip>\r\n            </List>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n      </Dialog>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state:StoreState):LoginProps => ({\r\n  user:state.user\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch:any):LoginProps => {\r\n  return {\r\n    dispatch:dispatch\r\n  }\r\n}\r\n\r\nconst connected = connect(mapStateToProps, mapDispatchToProps)(Login);\r\nexport default connected;\r\n","import firebaseSvc from \"./firebase.service\";\r\n\r\nclass FireStoreDatabase {\r\n\r\n  async getCollection<T>(collectionPath: string, qry: (collection: firebase.firestore.Query) => firebase.firestore.Query = null) {\r\n\r\n    let coll = this.firestore.collection(collectionPath) as firebase.firestore.Query;\r\n    if (qry) {\r\n      coll = qry(coll);\r\n    }\r\n\r\n    const snapshot = await coll.get();\r\n    let items: T[] = [];\r\n    snapshot.forEach(doc => {\r\n      let docData: any = doc.data();\r\n      docData.ID = doc.id;\r\n      items.push(docData);\r\n    });\r\n    (items as any[]).sort((a, b) => a.ID.localeCompare(b.ID));\r\n    return items;\r\n  }\r\n\r\n  async addToCollection<T>(collectionPath: string, item: T) {\r\n    const docRef = await this.firestore\r\n      .collection(collectionPath)\r\n      .add(item);\r\n    item['ID'] = docRef.id;\r\n    return item;\r\n  }\r\n\r\n  updateItem<T>(collectionPath: string, item: T) {\r\n    return this.firestore\r\n      .collection(collectionPath)\r\n      .doc(item['ID'])\r\n      .update(item);\r\n  }\r\n\r\n  updateMany<T>(collectionPath: string, items: T[]){\r\n    const batch = this.firestore.batch();\r\n    for (const item of items) {\r\n      const itemDocRef = this.firestore.collection(collectionPath).doc(item[\"ID\"]);\r\n      batch.update(itemDocRef, item);\r\n    }\r\n    return batch.commit();\r\n  }\r\n\r\n  removeItem<T>(collectionPath: string, item: T) {\r\n    return this.firestore\r\n      .collection(collectionPath)\r\n      .doc(item['ID'])\r\n      .delete();\r\n  }\r\n\r\n  removeMany<T>(collectionPath:string, items:T[]){\r\n    const batch = this.firestore.batch();\r\n    for (const item of items) {\r\n      const itemDocRef = this.firestore.collection(collectionPath).doc(item[\"ID\"]);\r\n      batch.delete(itemDocRef);\r\n    }\r\n\r\n    return batch.commit();\r\n  }\r\n\r\n  firestore = firebaseSvc.firestore();\r\n}\r\n\r\nexport const databaseSvc = new FireStoreDatabase();","import * as React from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, TextField, DialogActions, Button } from '@material-ui/core';\r\nimport { Subject } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\n\r\nexport interface ITextDialogProps {\r\n  title?:string;\r\n  label?:string;\r\n  setShow?:(showFn:(str:string)=>Promise<string>)=>any\r\n}\r\n\r\nexport function TextDialog (props: ITextDialogProps) {\r\n    \r\n    const [value,setValue] = React.useState(\"\");\r\n    const [open,setOpen] = React.useState(false);\r\n    const responseStream = React.useMemo(()=>new Subject<string>(),[]);\r\n\r\n    const show = React.useCallback((initialValue:string = \"\")=>{\r\n      setValue(initialValue);\r\n      setOpen(true);\r\n      return responseStream.pipe(take(1)).toPromise();\r\n    },[]);\r\n\r\n    const respondAndClose = React.useCallback((response:string)=>{\r\n      responseStream.next(response);\r\n      setOpen(false);\r\n    },[]);\r\n\r\n    props.setShow && props.setShow(show);\r\n\r\n    return (\r\n      <Dialog open={open}>\r\n        <DialogTitle>{props.title}</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            style={({minWidth:\"300px\"})}\r\n            label={props.label}\r\n            fullWidth\r\n            value={value}\r\n            onChange={(e)=>setValue(e.target.value)}\r\n            margin=\"dense\"\r\n          />          \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={e=>respondAndClose(undefined)}>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={e=>respondAndClose(value)}>\r\n            Ok\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n}\r\n","import * as React from 'react';\r\n\r\nexport interface IDraggableProps {\r\n  children:React.ReactNode;\r\n  className?:string;\r\n  model?:any;\r\n}\r\n\r\nexport function Draggable (props: IDraggableProps) {\r\n    \r\n    const ref = React.useRef<HTMLSpanElement>();\r\n\r\n    React.useEffect(()=>{\r\n      ref && ref.current && (ref.current[\"model\"] = props.model);\r\n    },[props.model])\r\n\r\n    React.useEffect(()=>{\r\n      ref && ref.current && $(ref.current).draggable({\r\n        handle:\".note-list-item-icon\",\r\n        revert: true,\r\n        revertDuration: 0,\r\n        axis: 'y'\r\n      });\r\n    },[ref.current]);\r\n\r\n    return (\r\n      <span ref={ref} className={props.className}>\r\n        {props.children}\r\n      </span>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { INote } from '../models/note.interface';\r\nimport { IFolder } from '../models/folder.interface';\r\nimport { mapStateFn } from '../models/mapState.interface';\r\nimport { connect } from 'react-redux'\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport { dispatchFn, mapDispatchFn } from '../models/mapDispatch.interface';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Badge, ListItem, List, ListItemText, Checkbox, ListItemIcon, Fab, IconButton, Icon, ExpansionPanelActions, Button, MenuItem, Menu } from '@material-ui/core';\r\nimport { ReduxAction } from '../redux/redux-action.class';\r\nimport { ActionTypes } from '../redux/action-types';\r\nimport { TextDialog } from './TextDialog';\r\nimport { useConfirmDialog } from '../hooks/useConfirmDialog';\r\nimport { Draggable } from './Draggable';\r\nimport { IDictionary } from '../models/dictionary.interface';\r\n\r\nexport interface IAppProps {\r\n  strSearch?:string;\r\n  dispatch?:dispatchFn;\r\n  notes?:INote[];\r\n  folder:IFolder;\r\n  selectedNote?:INote;\r\n  onCheckNote?:(note:INote,checked:boolean)=>any;\r\n  onClickAddNote?:(folderID:string)=>any;\r\n  onClickDeleteNotes?:()=>any;\r\n  onClickDeleteFolder?:(folder:IFolder)=>any;\r\n  onUpdateFolder?:(folder:IFolder)=>any;\r\n  checkedNotes:INote[];\r\n  openFolders?:IDictionary<boolean>;\r\n}\r\n\r\nfunction Folder (props: IAppProps) {\r\n    const [menuAnchor,setMenuAnchor] = React.useState(null);\r\n    const regex = new RegExp(props.strSearch||\"\",\"ig\");\r\n    const folder = props.folder;\r\n    const notes = (props.notes||[])\r\n                    .filter(n=>(n.Title+\" \"+n.Body).match(regex) && n.FolderID==folder.ID)\r\n                    .sort((a,b)=>a.Title.toLowerCase().localeCompare(b.Title.toLowerCase()));\r\n\r\n    const selectedNote = props.selectedNote;\r\n    const checkedNotes = props.checkedNotes||[];\r\n    const [showConfirm, confirmDialog] = useConfirmDialog();\r\n\r\n    let showTextDialog:(val:string)=>Promise<string> = null;\r\n\r\n    const handleNoteCheckChange = React.useCallback((note:INote,checked:boolean)=>{\r\n      props.onCheckNote && props.onCheckNote(note,checked);\r\n    },[]);\r\n\r\n    const handleClickMenu = React.useCallback((e:React.MouseEvent<HTMLDivElement, MouseEvent>)=>{\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      setMenuAnchor(e.target);\r\n    },[]);\r\n\r\n    const handleMenuClose = React.useCallback(()=>{\r\n      setMenuAnchor(null);\r\n    },[]);\r\n\r\n    const handleExpandChange = React.useCallback((event: React.ChangeEvent<{}>,open:boolean)=>{\r\n      const openFolders = {...(props.openFolders || {})};\r\n      openFolders[folder.ID] = open;\r\n      const action = new ReduxAction(\r\n        ActionTypes.SET_OPEN_FOLDERS,\r\n        openFolders\r\n      );\r\n\r\n      props.dispatch(action.value);\r\n    },[folder.ID,props.openFolders]);\r\n\r\n    const handleAddNote = React.useCallback(()=>{\r\n      props.onClickAddNote && props.onClickAddNote(folder.ID);\r\n      handleMenuClose();\r\n    },[folder]);\r\n\r\n    const handleDeleteNotes = React.useCallback(async ()=>{\r\n      handleMenuClose();\r\n      if(await showConfirm(`Confirm`,`Delete Notes?`)){\r\n        props.onClickDeleteNotes && props.onClickDeleteNotes();\r\n      }\r\n    },[folder,notes]);\r\n\r\n    const handleDeleteFolder = React.useCallback(async ()=>{\r\n      handleMenuClose();\r\n      if(await showConfirm(`Confirm`,`Delete folder \"${folder.Name}?\"`)){\r\n        props.onClickDeleteFolder && props.onClickDeleteFolder(props.folder);\r\n      }\r\n    },[folder]);\r\n\r\n    const handleRename = React.useCallback(async ()=>{\r\n      handleMenuClose();\r\n      const response = await showTextDialog(folder.Name);\r\n      if(response != null){\r\n        props.onUpdateFolder && props.onUpdateFolder({...folder,Name:response});\r\n      }\r\n    },[folder]);\r\n\r\n    return (\r\n      \r\n        <ExpansionPanel expanded={props.openFolders && props.openFolders[props.folder.ID]} onChange={handleExpandChange}>\r\n          <ExpansionPanelSummary expandIcon={<i className=\"fas fa-angle-down\"></i>}>\r\n            <Badge color={notes.length? \"primary\":\"error\"} showZero badgeContent={notes.length}>\r\n              <Typography>{folder.Name}</Typography>\r\n            </Badge>\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails style={({paddingLeft:\"5px\",paddingRight:\"5px\"})}>\r\n            <List classes={({root:'note-list'})} dense disablePadding style={({width:\"100%\"})}>\r\n            {\r\n              notes.map((n,index)=>(\r\n              <Draggable key={n.ID} className=\"draggable-note-liste-item\" model={n} >\r\n                <ListItem  classes={({root:'note-list-item'})} divider={index+1 < notes.length} \r\n                          dense\r\n                          button \r\n                          selected={n.ID==(selectedNote && selectedNote.ID || \"\")}\r\n                          onClick={()=>props.dispatch(new ReduxAction(ActionTypes.SET_SELECTED_NOTE,n).value)} >\r\n                  <Checkbox style={({padding:\"0px\"})} \r\n                      onClick={e=>e.stopPropagation()} \r\n                      onChange={(e,checked)=>handleNoteCheckChange(n,checked)} \r\n                      checked={checkedNotes.includes(n)}>\r\n                  </Checkbox>\r\n                  <ListItemText primary={n.Title}/>\r\n                  <ListItemIcon classes={({root:'note-list-item-icon'})} onClick={e=>e.stopPropagation()}>\r\n                    <i className=\"fas fa-arrows-alt\"></i>\r\n                  </ListItemIcon>\r\n                </ListItem>    \r\n              </Draggable>\r\n              ))\r\n            }\r\n            </List>\r\n          </ExpansionPanelDetails>\r\n          <ExpansionPanelActions>\r\n            <Fab size=\"small\" color=\"primary\" onClick={handleClickMenu}>\r\n              <i className=\"fas fa-ellipsis-v\"></i>\r\n            </Fab>\r\n          </ExpansionPanelActions>\r\n          <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={menuAnchor}\r\n            open={Boolean(menuAnchor)}\r\n            onClose={handleMenuClose}\r\n          >\r\n            <MenuItem onClick={handleAddNote}>\r\n              <i className=\"fas fa-file-medical\"></i>\r\n              &nbsp; Add Note\r\n            </MenuItem>\r\n            {\r\n            folder.ID!=null &&\r\n            <MenuItem onClick={handleRename}>\r\n              <i className=\"fas fa-pen\"></i>\r\n              &nbsp; Rename\r\n            </MenuItem>\r\n            }        \r\n            {\r\n            checkedNotes.length &&\r\n            <React.Fragment>\r\n              <MenuItem>\r\n                <i className=\"fas fa-exchange-alt\"></i>\r\n                &nbsp; Move Notes\r\n              </MenuItem>            \r\n              <MenuItem onClick={handleDeleteNotes}>\r\n                <i style={({color:\"#F44336\"})} className=\"fas fa-file\"></i>\r\n                &nbsp; Delete Notes\r\n              </MenuItem>\r\n            </React.Fragment>\r\n            }\r\n            {\r\n            folder.ID!=null &&\r\n            <MenuItem onClick={handleDeleteFolder}>\r\n              <i style={({color:\"#F44336\"})} className=\"fas fa-folder\"></i>\r\n              &nbsp; Delete Folder\r\n            </MenuItem>\r\n            }\r\n          </Menu>\r\n\r\n          <TextDialog title=\"Rename Folder\" label=\"Folder Name\" setShow={fn=>showTextDialog=fn}></TextDialog>\r\n          {confirmDialog}\r\n        </ExpansionPanel>\r\n      \r\n    );\r\n}\r\n\r\n\r\nconst mapState:mapStateFn<any> = (state)=>({\r\n  notes:state.notes,\r\n  strSearch: state.strSearch,\r\n  selectedNote: state.selectedNote,\r\n  openFolders: state.openFolders\r\n});\r\n\r\nconst mapDispatch:mapDispatchFn = (d)=>({\r\n  dispatch:d\r\n});\r\n\r\nexport default connect(mapState, mapDispatch)(Folder);","import React from \"react\";\r\nimport { useCallback, useMemo, useState } from \"react\";\r\nimport { Subject } from \"rxjs\";\r\nimport { Dialog, DialogContent, DialogTitle, DialogContentText, DialogActions, Button } from \"@material-ui/core\";\r\nimport { take } from \"rxjs/operators\";\r\n\r\nexport function useConfirmDialog():[(header: string, subheader: string) => Promise<boolean>, JSX.Element]{\r\n\r\n  const [open, setopen] = useState(false);\r\n  const [header, setheader] = useState(\"\");\r\n  const [subheader, setsubheader] = useState(\"\");\r\n  const stream = useMemo(()=>new Subject<boolean>(),[]);\r\n  const showDialog = useCallback((header:string,subheader:string)=>{\r\n    setheader(header);\r\n    setsubheader(subheader);\r\n    setopen(true);\r\n    return stream.pipe(take(1)).toPromise();\r\n  },[]);\r\n  const respond = useCallback((res:boolean)=>{\r\n    stream.next(res);\r\n    setopen(false);\r\n  },[]);\r\n\r\n  const dialog = (\r\n    <Dialog open={open}>\r\n      <DialogTitle>\r\n        {header}\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          {subheader}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={e=>respond(false)}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={e=>respond(true)}>\r\n          Ok\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n\r\n  return [showDialog,dialog]\r\n}","import * as React from 'react';\r\n\r\nexport interface IDroppableProps {\r\n  children:any;\r\n  className?:string;\r\n  model?:any;\r\n  onJqDrop?:(item:any,container:any)=>any;\r\n  accept?:any;\r\n}\r\n\r\nexport function Droppable (props: IDroppableProps) {\r\n    const ref = React.useRef<HTMLDivElement>();\r\n\r\n    React.useEffect(()=>{\r\n      ref && ref.current && (ref.current[\"model\"] = props.model);\r\n    },[props.model]);\r\n\r\n    React.useEffect(()=>{\r\n      ref && ref.current && $(ref.current).droppable({\r\n        accept: props.accept,\r\n        drop:(event, ui)=>{\r\n          const draggable = ui.draggable[0];\r\n          const droppable = event.target as HTMLElement;\r\n          props.onJqDrop && props.onJqDrop(draggable && draggable[\"model\"] || null, droppable && droppable[\"model\"] || null);\r\n        }\r\n      })\r\n    },[ref.current])\r\n\r\n    return (\r\n      <div ref={ref} className={props.className}>\r\n        {props.children}\r\n      </div>\r\n    );\r\n}\r\n","import React, { Component, Dispatch } from 'react'\r\nimport PropTypes, { element } from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '../redux/store-state';\r\nimport { IReduxAction, ReduxAction } from '../redux/redux-action.class';\r\nimport { databaseSvc } from '../services/database.service';\r\nimport { INote } from '../models/note.interface';\r\nimport { Paper, InputBase, Icon, LinearProgress, List, ListItem, ListItemText, ButtonBase, Button, Divider, ListItemIcon, Checkbox } from '@material-ui/core';\r\nimport color from '@material-ui/core/colors/lime';\r\nimport { ActionTypes } from '../redux/action-types';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport Folder from './Folder';\r\nimport { IFolder } from '../models/folder.interface';\r\nimport { Droppable } from './Droppable';\r\n\r\ninterface Props extends StoreState{\r\n  notes?:INote[];\r\n  folders?:IFolder[];\r\n  dispatch?:Dispatch<IReduxAction<any>>;\r\n  onSelectNote?:(note:INote)=>any\r\n  onAddNote?:(note:INote)=>any\r\n}\r\n\r\ninterface State{\r\n  loading?:boolean;\r\n  strSearch?:string;\r\n  checkedNotes?:INote[];\r\n}\r\n\r\nclass NoteList extends Component<Props,State> {\r\n  constructor(p){\r\n    super(p);\r\n    this.state = {\r\n      checkedNotes:[],\r\n      strSearch:null\r\n    };\r\n  }\r\n\r\n  sbjSearch = new Subject();\r\n\r\n  componentDidMount(){\r\n    this.sbjSearch\r\n      .pipe(debounceTime(500))\r\n      .subscribe(()=>{\r\n        this.setState({...this.state,loading:false});\r\n        this.props.dispatch(new ReduxAction(ActionTypes.SET_SEARCH_QUERY, this.state.strSearch).value);\r\n      });\r\n  }\r\n\r\n  getFilterNotes(){\r\n    const selectedNoteID = this.props && this.props.selectedNote && this.props.selectedNote.ID || \"\";\r\n    const searchToLower = (this.props.strSearch||\"\").toLowerCase();\r\n    const filtered = (this.props.notes||[])\r\n                          .slice(0)\r\n                          .filter(n => n.Body.toLowerCase().includes(searchToLower) ||\r\n                                    n.Title.toLocaleLowerCase().includes(searchToLower) ||\r\n                                    n.ID == selectedNoteID);\r\n    return filtered;\r\n  }\r\n\r\n  onSearchChange = (e:React.ChangeEvent<HTMLInputElement>)=>{\r\n    this.setState({...this.state,loading:true,strSearch:e.target.value});\r\n    this.sbjSearch.next({});\r\n  }\r\n\r\n  onClickNote = (note:INote)=>{\r\n    this.props.onSelectNote && this.props.onSelectNote(note);\r\n  }\r\n\r\n  onClickAddNote = async (folderID:string)=>{\r\n    const dummyTitle = 'NEW_NOTE_'+(new Date().getTime().toString());\r\n    let newNote:INote = {\r\n      Body:'',\r\n      Title:dummyTitle,\r\n      UID:this.props.user.uid,\r\n      FolderID: folderID\r\n    }\r\n    \r\n    await databaseSvc.addToCollection('notes',newNote);\r\n    const newNoteList = [...this.props.notes, newNote];\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_NOTE_LIST,newNoteList).value);\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_SELECTED_NOTE, newNote).value);\r\n\r\n    toast.info(\"New note added!\", { position:\"bottom-right\", hideProgressBar:true, autoClose:2500 });\r\n    setTimeout(() => {\r\n      const titleInput = document.querySelector('#txt-note-title') as HTMLInputElement;\r\n      titleInput.focus();\r\n      titleInput.select();\r\n    }, 100);\r\n  }\r\n\r\n  onClickDeleteNotes = async ()=>{\r\n    const notesToDelete = [...this.state.checkedNotes];\r\n\r\n    if(this.state.checkedNotes.includes(this.props.selectedNote)){\r\n      this.props.dispatch(new ReduxAction(ActionTypes.SET_SELECTED_NOTE, null).value);\r\n    }\r\n    this.setState({...this.state, checkedNotes:[]});\r\n\r\n    const newNoteList = this.props.notes.filter(n => !notesToDelete.includes(n));\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_NOTE_LIST, newNoteList).value);\r\n\r\n    toast.info(`${notesToDelete.length} note/s deleted!`, { position:\"bottom-right\", hideProgressBar:true, autoClose:2500 });\r\n\r\n    await databaseSvc.removeMany('notes', notesToDelete);\r\n  }\r\n\r\n  onClickAddFolder = async ()=>{\r\n    const newFolder:IFolder = {\r\n      ID:null,\r\n      Name: \"NEW_FOLDER_\"+(new Date().getTime()),\r\n      UID: this.props.user.uid\r\n    }\r\n    await databaseSvc.addToCollection(\"folders\", newFolder);\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_FOLDER_LIST,[...this.props.folders,newFolder]).value);\r\n    toast.info(`New folder added!`, { position:\"bottom-right\", hideProgressBar:true, autoClose:2500 });\r\n  }\r\n\r\n  onClickDeleteFolder = async (folder:IFolder)=>{\r\n    const newFolderList = this.props.folders.filter(f => f.ID!=folder.ID);\r\n    const notesFromFolder = this.props.notes.filter(n => n.FolderID==folder.ID);\r\n    notesFromFolder.forEach(n => n.FolderID=null);\r\n\r\n    console.log(folder, notesFromFolder);\r\n    await databaseSvc.removeItem(\"folders\", folder);\r\n    await databaseSvc.updateMany(\"notes\",notesFromFolder);\r\n\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_FOLDER_LIST, newFolderList).value);\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_NOTE_LIST, [...this.props.notes]).value);\r\n    toast.info(`Folder deleted!`, { position:\"bottom-right\", hideProgressBar:true, autoClose:2500 });\r\n  }\r\n\r\n  onNoteListCheck = (note:INote, checked:boolean)=>{\r\n    if(checked){\r\n      this.setState({...this.state, checkedNotes:[...this.state.checkedNotes,note]});\r\n    }else{\r\n      this.setState({...this.state, checkedNotes:this.state.checkedNotes.filter(n => n.ID!=note.ID)});\r\n    }\r\n  }\r\n\r\n  onUpdateFolder = async (folder:IFolder)=>{\r\n    const ix = this.props.folders.findIndex(f => f.ID==folder.ID);\r\n    if(ix+1){\r\n      this.props.folders[ix] = folder;\r\n      this.props.dispatch(new ReduxAction(ActionTypes.SET_FOLDER_LIST,[...this.props.folders]).value);\r\n      await databaseSvc.updateItem(\"folders\",folder);\r\n    }\r\n  }\r\n\r\n  onDropToFolder = async (note:INote,folder:IFolder) =>{\r\n    if(note && folder){\r\n      note.FolderID = folder.ID;\r\n      this.props.dispatch(new ReduxAction(ActionTypes.SET_NOTE_LIST, [...this.props.notes]).value);\r\n      await databaseSvc.updateItem(\"notes\", note);\r\n      toast.info(`\"${note.Title}\" moved to \"${folder.Name}\"`, { position:\"bottom-right\", hideProgressBar:true, autoClose:2500 });\r\n    }\r\n  }\r\n\r\n  willFolderAcceptNote = (draggable:JQuery, folder:IFolder)=>{\r\n    const d = draggable[0];\r\n    const model:INote = d && d[\"model\"] || null;\r\n    if(model && model.FolderID != folder.ID){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    const { loading } = this.state;\r\n    let strSearch = this.state.strSearch;\r\n    const folders = (this.props.folders||[]).sort((a,b)=>a.Name.toLowerCase().localeCompare(b.Name.toLowerCase()));\r\n    const foldersWithGeneral:IFolder[] = [{ID:null,Name:\"General Notes\",UID:this.props.user.uid},...folders];\r\n\r\n    if(strSearch==null){\r\n      strSearch = this.props.strSearch || \"\";\r\n    }\r\n\r\n    return (\r\n      <div className=\"note-list-component\">\r\n        <Paper classes={({root:\"actions-bar-wrapper\"})}>\r\n          <List>\r\n            <ListItem button dense onClick={this.onClickAddFolder}>\r\n              <ListItemText classes={({root:'note-item-text'})} >ADD FOLDER</ListItemText>\r\n              <ListItemIcon>\r\n                <i className=\"fas fa-folder-plus\"></i>\r\n              </ListItemIcon>        \r\n            </ListItem>            \r\n          </List>\r\n          &nbsp;\r\n        </Paper>\r\n        <Paper classes={({root:\"searchbar-paper\"})} >\r\n          <div className=\"search-input-wrapper\">\r\n            <InputBase onChange={this.onSearchChange}\r\n              value={strSearch} \r\n              classes={({root:\"search-input\"})} placeholder=\"Search..\"></InputBase>\r\n            <Icon fontSize=\"small\" classes={({root:'search-icon'})}>\r\n              <i style={({color:\"#a0a0a0\"})} className=\"fas fa-search\"></i>\r\n            </Icon>\r\n          </div>\r\n        </Paper>\r\n        <LinearProgress classes={({root:loading?\"search-progress-loading\":\"search-progress-complete\"})} \r\n          color=\"primary\">\r\n        </LinearProgress>\r\n        <div className=\"list-of-notes\">\r\n          {\r\n            foldersWithGeneral.map(folder=>(\r\n              <Droppable className=\"droppable-folder\" key={folder.ID} model={folder}  onJqDrop={this.onDropToFolder} accept={e=>this.willFolderAcceptNote(e,folder)} >\r\n                <Folder checkedNotes={this.state.checkedNotes} \r\n                      onCheckNote={this.onNoteListCheck} \r\n                      onClickAddNote={this.onClickAddNote}\r\n                      onClickDeleteNotes={this.onClickDeleteNotes}\r\n                      onClickDeleteFolder={this.onClickDeleteFolder}\r\n                      onUpdateFolder={this.onUpdateFolder}\r\n                      folder={folder}>\r\n                </Folder>\r\n              </Droppable>\r\n              )\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state:StoreState):StoreState => ({\r\n  ...state\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  dispatch:dispatch\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteList)\r\n","import React, { Component, Dispatch, createRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport { StoreState } from '../redux/store-state';\r\nimport { Paper, TextField, Typography, Button, IconButton, Hidden, CircularProgress, Icon, FormControlLabel, Switch } from '@material-ui/core';\r\nimport { Subject } from 'rxjs';\r\nimport { IReduxAction, ReduxAction } from '../redux/redux-action.class';\r\nimport { ActionTypes } from '../redux/action-types';\r\nimport { INote } from '../models/note.interface';\r\nimport { async } from 'q';\r\nimport { databaseSvc } from '../services/database.service';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface Props extends StoreState{\r\n  dispatch?:<T>(action:IReduxAction<T>)=>any;\r\n  notes?:INote[];\r\n}\r\n\r\ninterface State{\r\n  loading?:boolean;\r\n  title?:string;\r\n  body?:string;\r\n  readonly?: boolean;\r\n}\r\n\r\nclass NoteEditor extends Component<Props, State> {\r\n\r\n  constructor(p){\r\n    super(p);\r\n    this.state = {};\r\n  }\r\n\r\n  sbjChange = new Subject<{title:string,body:string,readonly:boolean}>();\r\n  //quillRef = createRef<ReactQuill>();\r\n\r\n  currentNoteID:string = null;\r\n\r\n  componentWillMount(){\r\n    this.sbjChange.pipe(debounceTime(500))\r\n      .subscribe(async ()=>{\r\n        this.props.dispatch(new ReduxAction(ActionTypes.SET_SELECTED_NOTE, this.props.selectedNote).value);\r\n        this.props.dispatch(new ReduxAction(ActionTypes.SET_NOTE_LIST, [...this.props.notes]).value);\r\n        await databaseSvc.updateItem('notes', this.props.selectedNote);\r\n        this.setState({...this.state,loading:false});\r\n      });\r\n  }\r\n\r\n  componentWillReceiveProps(a,b){\r\n    const prop = a as Props;\r\n    const upcomingNoteID = prop.selectedNote && prop.selectedNote.ID || null;\r\n    if(this.currentNoteID != upcomingNoteID){\r\n      this.setState({...this.state,title:null,body:null,readonly:null});\r\n    }\r\n    this.currentNoteID = prop.selectedNote && prop.selectedNote.ID || null;\r\n  }\r\n\r\n  onCloseNote = ()=>{\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_SELECTED_NOTE, null).value);\r\n  }\r\n\r\n  onDeleteNote = async (noteToDelete:INote)=>{\r\n    await databaseSvc.removeItem('notes',noteToDelete);\r\n    const newNoteList = this.props.notes.filter(n => n.ID!=noteToDelete.ID);\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_NOTE_LIST, newNoteList).value);\r\n    this.onCloseNote();\r\n  }\r\n\r\n  onTitleChange(title:string){\r\n    const note = this.props.selectedNote;\r\n    note.Title = title;\r\n    this.sbjChange.next({title:this.state.title, body:this.state.body, readonly:this.state.readonly});\r\n    this.setState({...this.state,loading:true,title:title});\r\n  }\r\n\r\n  onBodyChange = (text:string) => {\r\n    // if(source!=\"user\"){\r\n    //   return;\r\n    // }\r\n    //const text = ev.level.content;\r\n    const note = this.props.selectedNote;\r\n    note.Body = text;\r\n    this.sbjChange.next({title:this.state.title, body:this.state.body, readonly:this.state.readonly});\r\n    this.setState({...this.state,loading:true,body:text});\r\n  }\r\n\r\n  onReadOnlyChange(isReadOnlyChecked:boolean){\r\n    const note = this.props.selectedNote;\r\n    note.IsReadOnly = isReadOnlyChecked;\r\n    this.sbjChange.next({title:this.state.title, body:this.state.body, readonly:this.state.readonly });\r\n    this.setState({...this.state,loading:true,readonly:isReadOnlyChecked});\r\n  }\r\n\r\n  copyClipboard = () => {\r\n    //const text =this.quillRef.current.getEditor().getText();\r\n    var copyhelper = document.createElement(\"input\");\r\n    copyhelper.className = 'copyhelper'\r\n    document.body.appendChild(copyhelper);\r\n    //copyhelper.value = text;\r\n    copyhelper.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(copyhelper);    \r\n    toast.info(`\"${this.props.selectedNote.Title}\" copied to clipboard.`, { position:\"bottom-right\", hideProgressBar:true, autoClose:2500 });\r\n  }\r\n\r\n  render() {\r\n    const { selectedNote } = this.props;\r\n    let { title,body,readonly } = this.state;\r\n    if(title==null){\r\n      title = selectedNote && selectedNote.Title || \"\";\r\n    }    \r\n\r\n    if(body==null){\r\n      body = selectedNote && selectedNote.Body || \"\";\r\n    }    \r\n\r\n    if(readonly==null){\r\n      readonly = selectedNote && selectedNote.IsReadOnly || false;\r\n    }\r\n\r\n    return (\r\n      <div className={\"note-editor-component\"}>\r\n        <div className={\"empty-editor-wrapper \"+(selectedNote && \"hidden\")}>\r\n          <div className={\"empty-editor-paper\"}>\r\n            <div>\r\n              <Icon>\r\n                <i className=\"backdrop-icon fas fa-book\"></i>\r\n              </Icon>\r\n            </div>\r\n          </div>        \r\n        </div> \r\n        <Paper classes={({root:(!selectedNote && \"hidden\")})} square>\r\n          <div className=\"title-wraper\">\r\n            <TextField id=\"txt-note-title\" \r\n              label=\"Title\" \r\n              onChange={e=>this.onTitleChange(e.target.value)} \r\n              classes={({root:'txt-title'})} \r\n              disabled={!selectedNote} \r\n              value={title}></TextField>\r\n            <CircularProgress color=\"secondary\" className={\"editor-save-progress \"+(!this.state.loading && \"hidden\")} />\r\n          </div>\r\n        </Paper>\r\n        <Paper classes={({root:\"quill-paper-wrapper \"+(!selectedNote && \"hidden\")})} square >      \r\n          {/* <ReactQuill onChange={(e,delta,source)=>this.onBodyChange(e,delta,source)} \r\n            ref={this.quillRef}\r\n            readOnly={!selectedNote || readonly} \r\n            value={body} \r\n            placeholder=\"write your notes :)\" theme=\"snow\" /> */}\r\n          <Editor\r\n            apiKey=\"g8p3uw4cm5xtob3gmhm918uozx96r78pql9tian9u9rzr1ip\"\r\n            init={{\r\n              paste_data_images : true,\r\n              skin: \"oxide-dark\",\r\n              content_css: \"dark\",\r\n              height: 666,\r\n              menubar: false,\r\n              plugins: [\r\n                'advlist autolink lists link image charmap print preview anchor',\r\n                'searchreplace visualblocks code fullscreen',\r\n                'insertdatetime media table paste code help wordcount'\r\n              ],\r\n              toolbar:\r\n                'undo redo | formatselect | bold italic backcolor | \\\r\n                alignleft aligncenter alignright alignjustify | \\\r\n                bullist numlist outdent indent | removeformat | help'\r\n            }}\r\n            disabled={!selectedNote || readonly}\r\n            value={body}\r\n            onEditorChange={this.onBodyChange}\r\n          />            \r\n\r\n          <div className=\"bottom-toolbar\">\r\n            {/* <IconButton onClick={this.copyClipboard} className=\"btn-copy\" disableRipple>\r\n              <i className=\"fas fa-clipboard\"></i>\r\n            </IconButton>             */}\r\n            <FormControlLabel\r\n              control={\r\n                <Switch checked={readonly} onChange={(e,checked)=>this.onReadOnlyChange(checked)} />\r\n              }\r\n              label=\"Read-only\"/>            \r\n          </div>\r\n        </Paper>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  ...state\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({dispatch})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteEditor)\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Toolbar, IconButton, Typography, AppBar, Hidden, withWidth, Tooltip, SwipeableDrawer } from '@material-ui/core';\r\nimport { Dispatch } from 'redux';\r\nimport { StoreState } from '../redux/store-state';\r\nimport { IReduxAction, ReduxAction } from '../redux/redux-action.class';\r\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\r\nimport authSvc from '../services/auth.service';\r\nimport { ActionTypes } from '../redux/action-types';\r\nimport NoteList from './NoteList';\r\nimport { INote } from '../models/note.interface';\r\nimport NoteEditor from './NoteEditor';\r\n\r\ninterface LayoutProps extends StoreState{\r\n  dispatch?:<T>(action:IReduxAction<T>)=>any,\r\n  width?:Breakpoint\r\n}\r\n\r\ninterface LayoutState {\r\n  drawerOpen?:boolean\r\n}\r\n\r\nclass Layout extends Component<LayoutProps, LayoutState> {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      drawerOpen:false\r\n    }\r\n  }\r\n\r\n  toggleDrawer = (isOpen:boolean = null)=>{\r\n    if(isOpen==null){\r\n      isOpen = !this.state.drawerOpen;\r\n    }\r\n\r\n    this.setState({...this.state,drawerOpen:isOpen});\r\n  }\r\n\r\n  isMobile(){\r\n    return this.props.width==\"xs\" || this.props.width==\"sm\";\r\n  }\r\n\r\n  logout = async()=>{\r\n    await authSvc.logOut();\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_USER, null).value);\r\n  }\r\n\r\n  onSelectNote = (note:INote)=>{\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_SELECTED_NOTE, note).value);\r\n    this.toggleDrawer(false);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`layout-component ${(this.state.drawerOpen || !this.isMobile()) && \"drawer-open\"}`}>\r\n        <nav>\r\n          <SwipeableDrawer anchor=\"left\" \r\n            variant={this.isMobile()? \"temporary\":\"permanent\"} \r\n            onOpen={()=>this.toggleDrawer(true)}\r\n            onClose={()=>this.toggleDrawer(false)} \r\n            open={this.state.drawerOpen} \r\n            classes={({paper:\"drawer-paper\"})} >\r\n            <NoteList onSelectNote={this.onSelectNote} ></NoteList>\r\n          </SwipeableDrawer>\r\n        </nav>      \r\n        <AppBar color=\"primary\" position=\"relative\">\r\n          <Toolbar>\r\n            <Hidden only={[\"md\",\"lg\",\"xl\"]} >\r\n              <IconButton onClick={()=>this.toggleDrawer()} >\r\n                <i className=\"fas fa-bars\"></i>\r\n              </IconButton>   \r\n            </Hidden>\r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n              {this.props.user.email}  \r\n            </Typography>\r\n            <Tooltip title=\"Sign Out\" placement=\"left\" >\r\n              <IconButton onClick={this.logout} classes={({root:\"btn-logout\"})} >\r\n                <i style={({fontSize:\"20px\"})} className=\"fas fa-power-off\"></i>\r\n              </IconButton>\r\n            </Tooltip>            \r\n          </Toolbar>\r\n        </AppBar>\r\n        <div className=\"layout-content\">\r\n          <NoteEditor></NoteEditor>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state:StoreState):StoreState => ({\r\n    user:state.user\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch) => {\r\n  return {\r\n    dispatch:dispatch\r\n  } as LayoutProps;\r\n}\r\n\r\nconst connected = connect(mapStateToProps, mapDispatchToProps)(Layout);\r\nconst withWidthConnected = withWidth()(connected);\r\nexport default withWidthConnected;\r\n","import React, { Component, Dispatch } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '../redux/store-state';\r\nimport { ReduxAction, IReduxAction } from '../redux/redux-action.class';\r\nimport firebase from 'firebase';\r\nimport { ActionTypes } from '../redux/action-types';\r\nimport firebaseSvc from '../services/firebase.service';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Login from './Login';\r\nimport Layout from './Layout';\r\nimport { databaseSvc } from '../services/database.service';\r\nimport { INote } from '../models/note.interface';\r\nimport { IFolder } from '../models/folder.interface';\r\n\r\ninterface AuthProtectorProps extends StoreState {\r\n  dispatch?:(action:IReduxAction<any>)=>any\r\n}\r\n\r\ninterface AuthProtectorState {\r\n  loading?: boolean;\r\n}\r\n\r\nclass AuthProtector extends Component<AuthProtectorProps, AuthProtectorState> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.checkAuth();\r\n  }\r\n\r\n  async checkAuth(){\r\n    this.setState({...this.state,loading:true});\r\n    firebaseSvc.auth().onAuthStateChanged(user => {\r\n      this.props.dispatch(new ReduxAction(ActionTypes.SET_USER, user).value);\r\n      this.setState({...this.state,loading:false});\r\n      if(user){\r\n        this.loadNotes();\r\n      }      \r\n    });\r\n  }\r\n\r\n  async loadNotes(){\r\n    const folders = databaseSvc.getCollection<IFolder>(\"folders\",(qry)=>qry.where(\"UID\",\"==\",this.props.user.uid));\r\n    const notes = databaseSvc.getCollection<INote>(\"notes\", (qry)=>qry.where(\"UID\",\"==\",this.props.user.uid));\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_NOTE_LIST, await notes).value);\r\n    this.props.dispatch(new ReduxAction(ActionTypes.SET_FOLDER_LIST, await folders).value);\r\n  }  \r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"giant-progress-container-wrapper\">\r\n          <div className=\"giant-progress-container\">\r\n            <CircularProgress\r\n              variant=\"indeterminate\"\r\n              size={200}\r\n              value={50}\r\n              color=\"primary\"\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.props.user == null) {\r\n      return (\r\n        <div className=\"flex-hbox login-wrapper\">\r\n          <Login></Login>\r\n\t\t\t\t</div>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout></Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState): AuthProtectorProps => ({\r\n  user: state.user\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch<any>):AuthProtectorProps => {\r\n  return {\r\n    dispatch:dispatch\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthProtector)\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport '../stylesheets/App.scss';\r\n// import 'react-quill/dist/quill.snow.css';\r\n// import 'react-quill/dist/quill.core.css';\r\n\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '@material-ui/core'\r\nimport firebase from 'firebase';\r\nimport { Button, CssBaseline } from '@material-ui/core';\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport AuthProtector from './AuthProtector';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nconst theme = createMuiTheme({\r\n  palette:{\r\n    type: 'dark',\r\n    primary:{\r\n      main:'#673ab7'\r\n    },\r\n    secondary: {\r\n      main: '#00e5ff',\r\n    }\r\n  }\r\n});\r\n\r\ninterface AppProps{\r\n\r\n}\r\n\r\nclass App extends Component<AppProps> {\r\n  constructor(props){\r\n    super(props);\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MuiThemeProvider theme={theme}>\r\n          <CssBaseline/>\r\n          <AuthProtector></AuthProtector>\r\n          <ToastContainer />\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}